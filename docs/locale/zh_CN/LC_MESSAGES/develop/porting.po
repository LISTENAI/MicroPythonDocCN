# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../develop/porting.rst:4
msgid "Porting MicroPython"
msgstr ""

#: ../../develop/porting.rst:6
msgid ""
"The MicroPython project contains several ports to different "
"microcontroller families and architectures. The project repository has a "
"`ports <https://github.com/micropython/micropython/tree/master/ports>`_ "
"directory containing a subdirectory for each supported port."
msgstr ""

#: ../../develop/porting.rst:10
msgid ""
"A port will typically contain definitions for multiple \"boards\", each "
"of which is a specific piece of hardware that that port can run on, e.g. "
"a development kit or device."
msgstr ""

#: ../../develop/porting.rst:13
msgid ""
"The `minimal port "
"<https://github.com/micropython/micropython/tree/master/ports/minimal>`_ "
"is available as a simplified reference implementation of a MicroPython "
"port.  It can run on both the host system and an STM32F4xx MCU."
msgstr ""

#: ../../develop/porting.rst:17
msgid "In general, starting a port requires:"
msgstr ""

#: ../../develop/porting.rst:19
msgid "Setting up the toolchain (configuring Makefiles, etc)."
msgstr ""

#: ../../develop/porting.rst:20
msgid "Implementing boot configuration and CPU initialization."
msgstr ""

#: ../../develop/porting.rst:21
msgid ""
"Initialising basic drivers required for development and debugging (e.g. "
"GPIO, UART)."
msgstr ""

#: ../../develop/porting.rst:22
msgid "Performing the board-specific configurations."
msgstr ""

#: ../../develop/porting.rst:23
msgid "Implementing the port-specific modules."
msgstr ""

#: ../../develop/porting.rst:26
msgid "Minimal MicroPython firmware"
msgstr ""

#: ../../develop/porting.rst:28
msgid ""
"The best way to start porting MicroPython to a new board is by "
"integrating a minimal MicroPython interpreter.  For this walkthrough, "
"create a subdirectory for the new port in the ``ports`` directory:"
msgstr ""

#: ../../develop/porting.rst:37
msgid ""
"The basic MicroPython firmware is implemented in the main port file, e.g "
"``main.c``:"
msgstr ""

#: ../../develop/porting.rst:89
msgid "We also need a Makefile at this point for the port:"
msgstr ""

#: ../../develop/porting.rst:127
msgid "Remember to use proper tabs to indent the Makefile."
msgstr ""

#: ../../develop/porting.rst:130
msgid "MicroPython Configurations"
msgstr ""

#: ../../develop/porting.rst:132
msgid ""
"After integrating the minimal code above, the next step is to create the "
"MicroPython configuration files for the port. The compile-time "
"configurations are specified in ``mpconfigport.h`` and additional "
"hardware-abstraction functions, such as time keeping, in ``mphalport.h``."
msgstr ""

#: ../../develop/porting.rst:137
msgid "The following is an example of an ``mpconfigport.h`` file:"
msgstr ""

#: ../../develop/porting.rst:176
msgid ""
"This configuration file contains machine-specific configurations "
"including aspects like if different MicroPython features should be "
"enabled e.g. ``#define MICROPY_ENABLE_GC (1)``. Making this Setting "
"``(0)`` disables the feature."
msgstr ""

#: ../../develop/porting.rst:180
msgid ""
"Other configurations include type definitions, root pointers, board name,"
" microcontroller name etc."
msgstr ""

#: ../../develop/porting.rst:183
msgid "Similarly, an minimal example ``mphalport.h`` file looks like this:"
msgstr ""

#: ../../develop/porting.rst:190
msgid "Support for standard input/output"
msgstr ""

#: ../../develop/porting.rst:192
msgid ""
"MicroPython requires at least a way to output characters, and to have a "
"REPL it also requires a way to input characters. Functions for this can "
"be implemented in the file ``mphalport.c``, for example:"
msgstr ""

#: ../../develop/porting.rst:215
msgid ""
"These input and output functions have to be modified depending on the "
"specific board API. This example uses the standard input/output stream."
msgstr ""

#: ../../develop/porting.rst:219
msgid "Building and running"
msgstr ""

#: ../../develop/porting.rst:221
msgid "At this stage the directory of the new port should contain::"
msgstr ""

#: ../../develop/porting.rst:230
msgid ""
"The port can now be built by running ``make`` (or otherwise, depending on"
" your system)."
msgstr ""

#: ../../develop/porting.rst:232
msgid ""
"If you are using the default compiler settings in the Makefile given "
"above then this will create an executable called ``build/firmware.elf`` "
"which can be executed directly. To get a functional REPL you may need to "
"first configure the terminal to raw mode:"
msgstr ""

#: ../../develop/porting.rst:241
msgid "That should give a MicroPython REPL.  You can then run commands like:"
msgstr ""

#: ../../develop/porting.rst:251
msgid "Use Ctrl-D to exit, and then run ``reset`` to reset the terminal."
msgstr ""

#: ../../develop/porting.rst:254
msgid "Adding a module to the port"
msgstr ""

#: ../../develop/porting.rst:256
msgid ""
"To add a custom module like ``myport``, first add the module definition "
"in a file ``modmyport.c``:"
msgstr ""

#: ../../develop/porting.rst:282
msgid ""
"Note: the \"1\" as the third argument in ``MP_REGISTER_MODULE`` enables "
"this new module unconditionally. To allow it to be conditionally enabled,"
" replace the \"1\" by ``MICROPY_PY_MYPORT`` and then add ``#define "
"MICROPY_PY_MYPORT (1)`` in ``mpconfigport.h`` accordingly."
msgstr ""

#: ../../develop/porting.rst:287
msgid ""
"You will also need to edit the Makefile to add ``modmyport.c`` to the "
"``SRC_C`` list, and a new line adding the same file to ``SRC_QSTR`` (so "
"qstrs are searched for in this new file), like this:"
msgstr ""

#: ../../develop/porting.rst:301
msgid ""
"If all went correctly then, after rebuilding, you should be able to "
"import the new module:"
msgstr ""

