# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../develop/optimizations.rst:4
msgid "Optimizations"
msgstr ""

#: ../../develop/optimizations.rst:6
msgid ""
"MicroPython uses several optimizations to save RAM but also ensure the "
"efficient execution of programs. This chapter discusses some of these "
"optimizations."
msgstr ""

#: ../../develop/optimizations.rst:10
msgid ""
":ref:`qstr` and :ref:`maps` details other optimizations on strings and "
"dictionaries."
msgstr ""

#: ../../develop/optimizations.rst:14
msgid "Frozen bytecode"
msgstr ""

#: ../../develop/optimizations.rst:16
msgid ""
"When MicroPython loads Python code from the filesystem, it first has to "
"parse the file into a temporary in-memory representation, and then "
"generate bytecode for execution, both of which are stored in the heap (in"
" RAM). This can lead to significant amounts of memory being used. The "
"MicroPython cross compiler can be used to generate a ``.mpy`` file, "
"containing the pre-compiled bytecode for a Python module. This will still"
" be loaded into RAM, but it avoids the additional overhead of the parsing"
" stage."
msgstr ""

#: ../../develop/optimizations.rst:23
msgid ""
"As a further optimisation, the pre-compiled bytecode from a ``.mpy`` file"
" can be \"frozen\" into the firmware image as part of the main firmware "
"compilation process, which means that the bytecode will be executed from "
"ROM. This can lead to a significant memory saving, and reduce heap "
"fragmentation."
msgstr ""

#: ../../develop/optimizations.rst:29
msgid "Variables"
msgstr ""

#: ../../develop/optimizations.rst:31
msgid ""
"MicroPython processes local and global variables differently. Global "
"variables are stored and looked up from a global dictionary that is "
"allocated on the heap (note that each module has its own separate dict, "
"so separate namespace). Local variables on the other hand are are stored "
"on the Python value stack, which may live on the C stack or on the heap."
"  They are accessed directly by their offset within the Python stack, "
"which is more efficient than a global lookup in a dict."
msgstr ""

#: ../../develop/optimizations.rst:38
msgid ""
"The length of global variable names also affects how much RAM is used as "
"identifiers are stored in RAM. The shorter the identifier, the less "
"memory is used."
msgstr ""

#: ../../develop/optimizations.rst:41
msgid ""
"The other aspect is that ``const`` variables that start with an "
"underscore are treated as proper constants and are not allocated or added"
" in a dictionary, hence saving some memory. These variables use "
"``const()`` from the MicroPython library. Therefore:"
msgstr ""

#: ../../develop/optimizations.rst:53
msgid "Compiles to:"
msgstr ""

#: ../../develop/optimizations.rst:61
msgid "Allocation of memory"
msgstr ""

#: ../../develop/optimizations.rst:63
msgid ""
"Most of the common MicroPython constructs are not allocated on the heap. "
"However the following are:"
msgstr ""

#: ../../develop/optimizations.rst:66
msgid "Dynamic data structures like lists, mappings, etc;"
msgstr ""

#: ../../develop/optimizations.rst:67
msgid "Functions, classes and object instances;"
msgstr ""

#: ../../develop/optimizations.rst:68
msgid "imports; and"
msgstr ""

#: ../../develop/optimizations.rst:69
msgid ""
"First-time assignment of global variables (to create the slot in the "
"global dict)."
msgstr ""

#: ../../develop/optimizations.rst:71
msgid ""
"For a detailed discussion on a more user-centric perspective on "
"optimization, see `Maximising MicroPython speed "
"<https://docs.micropython.org/en/latest/reference/speed_python.html>`_"
msgstr ""

