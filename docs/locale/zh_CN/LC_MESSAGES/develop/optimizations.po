# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright © 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../develop/optimizations.rst:4
msgid "Optimizations"
msgstr "优化"

#: ../../develop/optimizations.rst:6
msgid ""
"MicroPython uses several optimizations to save RAM but also ensure the "
"efficient execution of programs. This chapter discusses some of these "
"optimizations."
msgstr ""
"MicroPython 使用多项优化来实现，在节省 RAM 的前提下保证了程序的有效执行。"
"本章节将介绍这些优化。"

#: ../../develop/optimizations.rst:10
msgid ""
":ref:`qstr` and :ref:`maps` details other optimizations on strings and "
"dictionaries."
msgstr ""
":ref:`qstr` 和 :ref:`maps` 详细介绍了字符串和字典上的其他优化。"

#: ../../develop/optimizations.rst:14
msgid "Frozen bytecode"
msgstr "冻结字节码"

#: ../../develop/optimizations.rst:16
msgid ""
"When MicroPython loads Python code from the filesystem, it first has to "
"parse the file into a temporary in-memory representation, and then "
"generate bytecode for execution, both of which are stored in the heap (in"
" RAM). This can lead to significant amounts of memory being used. The "
"MicroPython cross compiler can be used to generate a ``.mpy`` file, "
"containing the pre-compiled bytecode for a Python module. This will still"
" be loaded into RAM, but it avoids the additional overhead of the parsing"
" stage."
msgstr ""
"当 MicroPython 从文件系统加载 Python 代码时，它首先必须将文件解析为在内存中的临时"
"表示形式，再生成可执行的字节码，这两者都存储在（在 RAM 中）的堆上。"
"这可能导致大量的内存占用。要解决这一问题， 可使用 MicroPython 交叉编译器生成一个 ``.mpy`` 文件，"
"其中包含了一个 Python 模块的预编译字节码，虽然该文件仍会被加载到 RAM 中，但"
"这种方式避免了解析阶段的额外开销。"

#: ../../develop/optimizations.rst:23
msgid ""
"As a further optimisation, the pre-compiled bytecode from a ``.mpy`` file"
" can be \"frozen\" into the firmware image as part of the main firmware "
"compilation process, which means that the bytecode will be executed from "
"ROM. This can lead to a significant memory saving, and reduce heap "
"fragmentation."
msgstr ""
"作为进一步的优化，一个 ``.mpy`` 文件中的预编译字节码可以在主固件编译"
"阶段冻结到固件中，这意味着字节码将从 ROM 中执行。"
"这可以显著节省内存，并减少堆碎片。"

#: ../../develop/optimizations.rst:29
msgid "Variables"
msgstr "变量"

#: ../../develop/optimizations.rst:31
msgid ""
"MicroPython processes local and global variables differently. Global "
"variables are stored and looked up from a global dictionary that is "
"allocated on the heap (note that each module has its own separate dict, "
"so separate namespace). Local variables on the other hand are are stored "
"on the Python value stack, which may live on the C stack or on the heap."
"  They are accessed directly by their offset within the Python stack, "
"which is more efficient than a global lookup in a dict."
msgstr ""
"在 MicroPython 中，处理局部变量和全局变量的方式是不同的。"
"全局变量从在堆上分配的全局字典中存储和检索"
"（请注意，每个模块都有自己单独的字典，因此需要独立的命名空间）。"
"局部变量则存储在 Python 值栈中，可能存储在 C 的栈或堆中。"
"它们通过在 Python 栈中的偏移量直接访问，这比在字典中全局查找"
"更有效。"

#: ../../develop/optimizations.rst:38
msgid ""
"The length of global variable names also affects how much RAM is used as "
"identifiers are stored in RAM. The shorter the identifier, the less "
"memory is used."
msgstr ""
"全局变量名称的长度也会影响存储标识符时所占用的内存。"
"标识符越短，则所占用的内存越少。"

#: ../../develop/optimizations.rst:41
msgid ""
"The other aspect is that ``const`` variables that start with an "
"underscore are treated as proper constants and are not allocated or added"
" in a dictionary, hence saving some memory. These variables use "
"``const()`` from the MicroPython library. Therefore:"
msgstr ""
"另一方面，以下划线开头的 ``const`` 变量被视为妥善的常量，"
"不会被分配或添加到字典中，因此节省了一部分内存。"
"这些变量需要以 MicroPython 库中的 ``const()`` 函数创建。"
"因此："

#: ../../develop/optimizations.rst:53
msgid "Compiles to:"
msgstr "编译为："

#: ../../develop/optimizations.rst:61
msgid "Allocation of memory"
msgstr "内存分配"

#: ../../develop/optimizations.rst:63
msgid ""
"Most of the common MicroPython constructs are not allocated on the heap. "
"However the following are:"
msgstr ""
"大多数的 MicroPython 的构造都不会分配在堆上。"
"但是以下构造器则会："

#: ../../develop/optimizations.rst:66
msgid "Dynamic data structures like lists, mappings, etc;"
msgstr "动态数据结构，如列表，映射等；"

#: ../../develop/optimizations.rst:67
msgid "Functions, classes and object instances;"
msgstr "函数，类和对象实例；"

#: ../../develop/optimizations.rst:68
msgid "imports; and"
msgstr "使用 import 导入的模块；"

#: ../../develop/optimizations.rst:69
msgid ""
"First-time assignment of global variables (to create the slot in the "
"global dict)."
msgstr ""
"全局变量的首次赋值（通过在全局字典中创建槽）。"

#: ../../develop/optimizations.rst:71
msgid ""
"For a detailed discussion on a more user-centric perspective on "
"optimization, see `Maximising MicroPython speed "
"<https://docs.micropython.org/en/latest/reference/speed_python.html>`_"
msgstr ""
"有关更以用户为中心的优化视角的详细讨论，参阅"
" :ref:`最大化 MicroPython 速度"
" <speed_python>` 。"

