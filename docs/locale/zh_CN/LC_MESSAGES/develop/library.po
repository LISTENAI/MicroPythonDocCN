# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../develop/library.rst:4
msgid "Implementing a Module"
msgstr ""

#: ../../develop/library.rst:6
msgid ""
"This chapter details how to implement a core module in MicroPython. "
"MicroPython modules can be one of the following:"
msgstr ""

#: ../../develop/library.rst:9
msgid ""
"Built-in module: A general module that is be part of the MicroPython "
"repository."
msgstr ""

#: ../../develop/library.rst:10
msgid ""
"User module: A module that is useful for your specific project that you "
"maintain in your own repository or private codebase."
msgstr ""

#: ../../develop/library.rst:12
msgid ""
"Dynamic module: A module that can be deployed and imported at runtime to "
"your device."
msgstr ""

#: ../../develop/library.rst:14
msgid ""
"A module in MicroPython can be implemented in one of the following "
"locations:"
msgstr ""

#: ../../develop/library.rst:16
msgid "py/: A core library that mirrors core CPython functionality."
msgstr ""

#: ../../develop/library.rst:17
msgid ""
"extmod/: A CPython or MicroPython-specific module that is shared across "
"multiple ports."
msgstr ""

#: ../../develop/library.rst:18
msgid "ports/<port>/: A port-specific module."
msgstr ""

#: ../../develop/library.rst:21
msgid ""
"This chapter describes modules implemented in ``py/`` or core modules. "
"See :ref:`extendingmicropython` for details on implementing an external "
"module. For details on port-specific modules, see "
":ref:`porting_to_a_board`."
msgstr ""

#: ../../develop/library.rst:26
msgid "Implementing a core module"
msgstr ""

#: ../../develop/library.rst:28
msgid ""
"Like CPython, MicroPython has core builtin modules that can be accessed "
"through import statements. An example is the ``gc`` module discussed in "
":ref:`memorymanagement`."
msgstr ""

#: ../../develop/library.rst:37
msgid ""
"MicroPython has several other builtin standard/core modules like ``io``, "
"``array`` etc. Adding a new core module involves several modifications."
msgstr ""

#: ../../develop/library.rst:40
msgid ""
"First, create the ``C`` file in the ``py/`` directory. In this example we"
" are adding a hypothetical new module ``subsystem`` in the file "
"``modsubsystem.c``:"
msgstr ""

#: ../../develop/library.rst:71
msgid ""
"The implementation includes a definition of all functions related to the "
"module and adds the functions to the module's global table in "
"``mp_module_subsystem_globals_table``. It also creates the module object "
"with ``mp_module_subsystem``.  The module is then registered with the "
"wider system via the ``MP_REGISTER_MODULE`` macro."
msgstr ""

#: ../../develop/library.rst:76
msgid ""
"After building and running the modified MicroPython, the module should "
"now be importable:"
msgstr ""

#: ../../develop/library.rst:85
msgid ""
"Our ``info()`` function currently returns just a single number but can be"
" extended to do anything.  Similarly, more functions can be added to this"
" new module."
msgstr ""

