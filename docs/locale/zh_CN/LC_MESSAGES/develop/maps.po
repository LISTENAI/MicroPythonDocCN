# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../develop/maps.rst:4
msgid "Maps and Dictionaries"
msgstr ""

#: ../../develop/maps.rst:6
msgid ""
"MicroPython dictionaries and maps use techniques called open addressing "
"and linear probing. This chapter details both of these methods."
msgstr ""

#: ../../develop/maps.rst:10
msgid "Open addressing"
msgstr ""

#: ../../develop/maps.rst:12
msgid ""
"`Open addressing <https://en.wikipedia.org/wiki/Open_addressing>`_ is "
"used to resolve collisions. Collisions are very common occurrences and "
"happen when two items happen to hash to the same slot or location. For "
"example, given a hash setup as this:"
msgstr ""

#: ../../develop/maps.rst:18
msgid ""
"If there is a request to fill slot ``0`` with ``70``, since the slot "
"``0`` is not empty, open addressing finds the next available slot in the "
"dictionary to service this request. This sequential search for an "
"alternate location is called *probing*. There are several sequence "
"probing algorithms but MicroPython uses linear probing that is described "
"in the next section."
msgstr ""

#: ../../develop/maps.rst:24
msgid "Linear probing"
msgstr ""

#: ../../develop/maps.rst:26
msgid ""
"Linear probing is one of the methods for finding an available address or "
"slot in a dictionary. In MicroPython, it is used with open addressing. To"
" service the request described above, unlike other probing algorithms, "
"linear probing assumes a fixed interval of ``1`` between probes. The "
"request will therefore be serviced by placing the item in the next free "
"slot which is slot ``4`` in our example:"
msgstr ""

#: ../../develop/maps.rst:33
msgid ""
"The same methods i.e open addressing and linear probing are used to "
"search for an item in a dictionary. Assume we want to search for the data"
" item ``33``. The computed hash value will be 2. Looking at slot 2 "
"reveals ``33``, at this point, we return ``True``. Searching for ``70`` "
"is quite different as there was a collision at the time of insertion. "
"Therefore computing the hash value is ``0`` which is currently holding "
"``44``. Instead of simply returning ``False``, we perform a sequential "
"search starting at point ``1`` until the item ``70`` is found or we "
"encounter a free slot. This is the general way of performing look-ups in "
"hashes:"
msgstr ""

