# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/mpyfiles.rst:4
msgid "MicroPython .mpy files"
msgstr ""

#: ../../reference/mpyfiles.rst:6
msgid ""
"MicroPython defines the concept of an .mpy file which is a binary "
"container file format that holds precompiled code, and which can be "
"imported like a normal .py module.  The file ``foo.mpy`` can be imported "
"via ``import foo``, as long as ``foo.mpy`` can be found in the usual way "
"by the import machinery. Usually, each directory listed in ``sys.path`` "
"is searched in order.  When searching a particular directory ``foo.py`` "
"is looked for first and if that is not found then ``foo.mpy`` is looked "
"for, then the search continues in the next directory if neither is found."
"  As such, ``foo.py`` will take precedence over ``foo.mpy``."
msgstr ""

#: ../../reference/mpyfiles.rst:16
msgid ""
"These .mpy files can contain bytecode which is usually generated from "
"Python source files (.py files) via the ``mpy-cross`` program.  For some "
"architectures an .mpy file can also contain native machine code, which "
"can be generated in a variety of ways, most notably from C source code."
msgstr ""

#: ../../reference/mpyfiles.rst:22
msgid "Versioning and compatibility of .mpy files"
msgstr ""

#: ../../reference/mpyfiles.rst:24
msgid ""
"A given .mpy file may or may not be compatible with a given MicroPython "
"system. Compatibility is based on the following:"
msgstr ""

#: ../../reference/mpyfiles.rst:27
msgid ""
"Version of the .mpy file: the version of the file must match the version "
"supported by the system loading it."
msgstr ""

#: ../../reference/mpyfiles.rst:30
msgid ""
"Bytecode features used in the .mpy file: there are two bytecode features "
"which must match between the file and the system: unicode support and "
"inline caching of map lookups in the bytecode."
msgstr ""

#: ../../reference/mpyfiles.rst:34
msgid ""
"Small integer bits: the .mpy file will require a minimum number of bits "
"in a small integer and the system loading it must support at least this "
"many bits."
msgstr ""

#: ../../reference/mpyfiles.rst:38
msgid ""
"Qstr compression window size: the .mpy file will require a minimum window"
" size for qstr decompression and the system loading it must have a window"
" greater or equal to this size."
msgstr ""

#: ../../reference/mpyfiles.rst:42
msgid ""
"Native architecture: if the .mpy file contains native machine code then "
"it will specify the architecture of that machine code and the system "
"loading it must support execution of that architecture's code."
msgstr ""

#: ../../reference/mpyfiles.rst:46
msgid ""
"If a MicroPython system supports importing .mpy files then the "
"``sys.implementation.mpy`` field will exist and return an integer which "
"encodes the version (lower 8 bits), features and native architecture."
msgstr ""

#: ../../reference/mpyfiles.rst:50
msgid ""
"Trying to import an .mpy file that fails one of the first four tests will"
" raise ``ValueError('incompatible .mpy file')``.  Trying to import an "
".mpy file that fails the native architecture test (if it contains native "
"machine code) will raise ``ValueError('incompatible .mpy arch')``."
msgstr ""

#: ../../reference/mpyfiles.rst:55
msgid "If importing an .mpy file fails then try the following:"
msgstr ""

#: ../../reference/mpyfiles.rst:57
msgid ""
"Determine the .mpy version and flags supported by your MicroPython system"
" by executing::"
msgstr ""

#: ../../reference/mpyfiles.rst:73
msgid ""
"Check the validity of the .mpy file by inspecting the first two bytes of "
"the file.  The first byte should be an uppercase 'M' and the second byte "
"will be the version number, which should match the system version from "
"above. If it doesn't match then rebuild the .mpy file."
msgstr ""

#: ../../reference/mpyfiles.rst:78
msgid ""
"Check if the system .mpy version matches the version emitted by ``mpy-"
"cross`` that was used to build the .mpy file, found by ``mpy-cross "
"--version``. If it doesn't match then recompile ``mpy-cross`` from the "
"Git repository checked out at the tag (or hash) reported by ``mpy-cross "
"--version``."
msgstr ""

#: ../../reference/mpyfiles.rst:83
msgid ""
"Make sure you are using the correct ``mpy-cross`` flags, found by the "
"code above, or by inspecting the ``MPY_CROSS_FLAGS`` Makefile variable "
"for the port that you are using."
msgstr ""

#: ../../reference/mpyfiles.rst:87
msgid ""
"The following table shows the correspondence between MicroPython release "
"and .mpy version."
msgstr ""

#: ../../reference/mpyfiles.rst:91
msgid "MicroPython release"
msgstr ""

#: ../../reference/mpyfiles.rst:91
msgid ".mpy version"
msgstr ""

#: ../../reference/mpyfiles.rst:93
msgid "v1.12 and up"
msgstr ""

#: ../../reference/mpyfiles.rst:93
msgid "5"
msgstr ""

#: ../../reference/mpyfiles.rst:94
msgid "v1.11"
msgstr ""

#: ../../reference/mpyfiles.rst:94
msgid "4"
msgstr ""

#: ../../reference/mpyfiles.rst:95
msgid "v1.9.3 - v1.10"
msgstr ""

#: ../../reference/mpyfiles.rst:95
msgid "3"
msgstr ""

#: ../../reference/mpyfiles.rst:96
msgid "v1.9 - v1.9.2"
msgstr ""

#: ../../reference/mpyfiles.rst:96
msgid "2"
msgstr ""

#: ../../reference/mpyfiles.rst:97
msgid "v1.5.1 - v1.8.7"
msgstr ""

#: ../../reference/mpyfiles.rst:97
msgid "0"
msgstr ""

#: ../../reference/mpyfiles.rst:100
msgid ""
"For completeness, the next table shows the Git commit of the main "
"MicroPython repository at which the .mpy version was changed."
msgstr ""

#: ../../reference/mpyfiles.rst:104
msgid ".mpy version change"
msgstr ""

#: ../../reference/mpyfiles.rst:104
msgid "Git commit"
msgstr ""

#: ../../reference/mpyfiles.rst:106
msgid "4 to 5"
msgstr ""

#: ../../reference/mpyfiles.rst:106
msgid "5716c5cf65e9b2cb46c2906f40302401bdd27517"
msgstr ""

#: ../../reference/mpyfiles.rst:107
msgid "3 to 4"
msgstr ""

#: ../../reference/mpyfiles.rst:107
msgid "9a5f92ea72754c01cc03e5efcdfe94021120531e"
msgstr ""

#: ../../reference/mpyfiles.rst:108
msgid "2 to 3"
msgstr ""

#: ../../reference/mpyfiles.rst:108
msgid "ff93fd4f50321c6190e1659b19e64fef3045a484"
msgstr ""

#: ../../reference/mpyfiles.rst:109
msgid "1 to 2"
msgstr ""

#: ../../reference/mpyfiles.rst:109
msgid "dd11af209d226b7d18d5148b239662e30ed60bad"
msgstr ""

#: ../../reference/mpyfiles.rst:110
msgid "0 to 1"
msgstr ""

#: ../../reference/mpyfiles.rst:110
msgid "6a11048af1d01c78bdacddadd1b72dc7ba7c6478"
msgstr ""

#: ../../reference/mpyfiles.rst:111
msgid "initial version 0"
msgstr ""

#: ../../reference/mpyfiles.rst:111
msgid "d8c834c95d506db979ec871417de90b7951edc30"
msgstr ""

#: ../../reference/mpyfiles.rst:115
msgid "Binary encoding of .mpy files"
msgstr ""

#: ../../reference/mpyfiles.rst:117
msgid ""
"MicroPython .mpy files are a binary container format with code objects "
"stored internally in a nested hierarchy.  To keep files small while still"
" providing a large range of possible values it uses the concept of a "
"variably-encoded-unsigned-integer (vuint) in many places.  Similar to "
"utf-8 encoding, this encoding stores 7 bits per byte with the 8th bit "
"(MSB) set if one or more bytes follow.  The bits of the unsigned integer "
"are stored in the vuint in LSB form."
msgstr ""

#: ../../reference/mpyfiles.rst:125
msgid "The top-level of an .mpy file consists of two parts:"
msgstr ""

#: ../../reference/mpyfiles.rst:127
msgid "The header."
msgstr ""

#: ../../reference/mpyfiles.rst:129
msgid ""
"The raw-code for the outer scope of the module. This outer scope is "
"executed when the .mpy file is imported."
msgstr ""

#: ../../reference/mpyfiles.rst:133
msgid "The header"
msgstr ""

#: ../../reference/mpyfiles.rst:135
msgid "The .mpy header is:"
msgstr ""

#: ../../reference/mpyfiles.rst:138 ../../reference/mpyfiles.rst:154
msgid "size"
msgstr ""

#: ../../reference/mpyfiles.rst:138 ../../reference/mpyfiles.rst:154
msgid "field"
msgstr ""

#: ../../reference/mpyfiles.rst:140 ../../reference/mpyfiles.rst:141
#: ../../reference/mpyfiles.rst:142 ../../reference/mpyfiles.rst:143
msgid "byte"
msgstr ""

#: ../../reference/mpyfiles.rst:140
msgid "value 0x4d (ASCII 'M')"
msgstr ""

#: ../../reference/mpyfiles.rst:141
msgid ".mpy version number"
msgstr ""

#: ../../reference/mpyfiles.rst:142
msgid "feature flags"
msgstr ""

#: ../../reference/mpyfiles.rst:143
msgid "number of bits in a small int"
msgstr ""

#: ../../reference/mpyfiles.rst:144 ../../reference/mpyfiles.rst:156
#: ../../reference/mpyfiles.rst:158 ../../reference/mpyfiles.rst:159
msgid "vuint"
msgstr ""

#: ../../reference/mpyfiles.rst:144
msgid "size of qstr window"
msgstr ""

#: ../../reference/mpyfiles.rst:148
msgid "Raw code elements"
msgstr ""

#: ../../reference/mpyfiles.rst:150
msgid ""
"A raw-code element contains code, either bytecode or native machine code."
"  Its contents are:"
msgstr ""

#: ../../reference/mpyfiles.rst:156
msgid "type and size"
msgstr ""

#: ../../reference/mpyfiles.rst:157 ../../reference/mpyfiles.rst:160
#: ../../reference/mpyfiles.rst:161
msgid "..."
msgstr ""

#: ../../reference/mpyfiles.rst:157
msgid "code (bytecode or machine code)"
msgstr ""

#: ../../reference/mpyfiles.rst:158
msgid "number of constant objects"
msgstr ""

#: ../../reference/mpyfiles.rst:159
msgid "number of sub-raw-code elements"
msgstr ""

#: ../../reference/mpyfiles.rst:160
msgid "constant objects"
msgstr ""

#: ../../reference/mpyfiles.rst:161
msgid "sub-raw-code elements"
msgstr ""

#: ../../reference/mpyfiles.rst:164
msgid ""
"The first vuint in a raw-code element encodes the type of code stored in "
"this element (the two least-significant bits), and the decompressed "
"length of the code (the amount of RAM to allocate for it)."
msgstr ""

#: ../../reference/mpyfiles.rst:168
msgid ""
"Following the vuint comes the code itself.  In the case of bytecode it "
"also contains compressed qstr values."
msgstr ""

#: ../../reference/mpyfiles.rst:171
msgid ""
"Following the code comes a vuint counting the number of constant objects,"
" and another vuint counting the number of sub-raw-code elements."
msgstr ""

#: ../../reference/mpyfiles.rst:174
msgid "The constant objects are then stored next."
msgstr ""

#: ../../reference/mpyfiles.rst:176
msgid "Finally any sub-raw-code elements are stored, recursively."
msgstr ""

