# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/asm_thumb2_float.rst:2
msgid "Floating point instructions"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:4
msgid ""
"These instructions support the use of the ARM floating point coprocessor "
"(on platforms such as the Pyboard which are equipped with one). The FPU "
"has 32 registers known as ``s0-s31`` each of which can hold a single "
"precision float. Data can be passed between the FPU registers and the ARM"
" core registers with the ``vmov`` instruction."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:10
msgid ""
"Note that MicroPython doesn't support passing floats to assembler "
"functions, nor can you put a float into ``r0`` and expect a reasonable "
"result. There are two ways to overcome this. The first is to use arrays, "
"and the second is to pass and/or return integers and convert to and from "
"floats in code."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:17
msgid "Document conventions"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:19
msgid ""
"Notation: ``Sd, Sm, Sn`` denote FPU registers, ``Rd, Rm, Rn`` denote ARM "
"core registers. The latter can be any ARM core register although "
"registers ``R13-R15`` are unlikely to be appropriate in this context."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:24
msgid "Arithmetic"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:26
msgid "vadd(Sd, Sn, Sm) ``Sd = Sn + Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:27
msgid "vsub(Sd, Sn, Sm) ``Sd = Sn - Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:28
msgid "vneg(Sd, Sm) ``Sd = -Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:29
msgid "vmul(Sd, Sn, Sm) ``Sd = Sn * Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:30
msgid "vdiv(Sd, Sn, Sm) ``Sd = Sn / Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:31
msgid "vsqrt(Sd, Sm) ``Sd = sqrt(Sm)``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:33
msgid ""
"Registers may be identical: ``vmul(S0, S0, S0)`` will execute ``S0 = "
"S0*S0``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:36
msgid "Move between ARM core and FPU registers"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:38
msgid "vmov(Sd, Rm) ``Sd = Rm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:39
msgid "vmov(Rd, Sm) ``Rd = Sm``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:41
msgid ""
"The FPU has a register known as FPSCR, similar to the ARM core's APSR, "
"which stores condition codes plus other data. The following instructions "
"provide access to this."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:44
msgid "vmrs(APSR\\_nzcv, FPSCR)"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:46
msgid ""
"Move the floating-point N, Z, C, and V flags to the APSR N, Z, C, and V "
"flags."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:48
msgid ""
"This is done after an instruction such as an FPU comparison to enable the"
" condition codes to be tested by the assembler code. The following is a "
"more general form of the instruction."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:52
msgid "vmrs(Rd, FPSCR) ``Rd = FPSCR``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:55
msgid "Move between FPU register and memory"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:57
msgid "vldr(Sd, [Rn, offset]) ``Sd = [Rn + offset]``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:58
msgid "vstr(Sd, [Rn, offset]) ``[Rn + offset] = Sd``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:60
msgid ""
"Where ``[Rn + offset]`` denotes the memory address obtained by adding Rn "
"to the offset. This is specified in bytes. Since each float value "
"occupies a 32 bit word, when accessing arrays of floats the offset must "
"always be a multiple of four bytes."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:65
msgid "Data comparison"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:67
msgid "vcmp(Sd, Sm)"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:69
msgid ""
"Compare the values in Sd and Sm and set the FPU N, Z, C, and V flags. "
"This would normally be followed by ``vmrs(APSR_nzcv, FPSCR)`` to enable "
"the results to be tested."
msgstr ""

#: ../../reference/asm_thumb2_float.rst:74
msgid "Convert between integer and float"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:76
msgid "vcvt\\_f32\\_s32(Sd, Sm) ``Sd = float(Sm)``"
msgstr ""

#: ../../reference/asm_thumb2_float.rst:77
msgid "vcvt\\_s32\\_f32(Sd, Sm) ``Sd = int(Sm)``"
msgstr ""

