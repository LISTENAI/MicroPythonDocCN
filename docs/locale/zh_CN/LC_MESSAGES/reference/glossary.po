# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/glossary.rst:2
msgid "Glossary"
msgstr ""

#: ../../reference/glossary.rst:5
msgid "baremetal"
msgstr ""

#: ../../reference/glossary.rst:7
msgid ""
"A system without a (full-fledged) operating system, for example an "
":term:`MCU`-based system. When running on a baremetal system, MicroPython"
" effectively functions like a small operating system, running user "
"programs and providing a command interpreter (:term:`REPL`)."
msgstr ""

#: ../../reference/glossary.rst:12
msgid "buffer protocol"
msgstr ""

#: ../../reference/glossary.rst:14
msgid ""
"Any Python object that can be automatically converted into bytes, such as"
" ``bytes``, ``bytearray``, ``memoryview`` and ``str`` objects, which all "
"implement the \"buffer protocol\"."
msgstr ""

#: ../../reference/glossary.rst:17
msgid "board"
msgstr ""

#: ../../reference/glossary.rst:19
msgid ""
"Typically this refers to a printed circuit board (PCB) containing a "
":term:`microcontroller <MCU>` and supporting components. MicroPython "
"firmware is typically provided per-board, as the firmware contains both "
"MCU-specific functionality but also board-level functionality such as "
"drivers or pin names."
msgstr ""

#: ../../reference/glossary.rst:24
msgid "bytecode"
msgstr ""

#: ../../reference/glossary.rst:26
msgid ""
"A compact representation of a Python program that generated by compiling "
"the Python source code. This is what the VM actually executes. Bytecode "
"is typically generated automatically at runtime and is invisible to the "
"user. Note that while :term:`CPython` and MicroPython both use bytecode, "
"the format is different. You can also pre-compile source code offline "
"using the :term:`cross-compiler`."
msgstr ""

#: ../../reference/glossary.rst:32
msgid "callee-owned tuple"
msgstr ""

#: ../../reference/glossary.rst:34
msgid ""
"This is a MicroPython-specific construct where, for efficiency reasons, "
"some built-in functions or methods may re-use the same underlying tuple "
"object to return data. This avoids having to allocate a new tuple for "
"every call, and reduces heap fragmentation. Programs should not hold "
"references to callee-owned tuples and instead only extract data from them"
" (or make a copy)."
msgstr ""

#: ../../reference/glossary.rst:40
msgid "CircuitPython"
msgstr ""

#: ../../reference/glossary.rst:42
msgid ""
"A variant of MicroPython developed by `Adafruit Industries "
"<https://circuitpython.org>`_."
msgstr ""

#: ../../reference/glossary.rst:44
msgid "CPython"
msgstr ""

#: ../../reference/glossary.rst:46
msgid ""
"CPython is the reference implementation of the Python programming "
"language, and the most well-known one. It is, however, one of many "
"implementations (including Jython, IronPython, PyPy, and MicroPython). "
"While MicroPython's implementation differs substantially from CPython, it"
" aims to maintain as much compatibility as possible."
msgstr ""

#: ../../reference/glossary.rst:51
msgid "cross-compiler"
msgstr ""

#: ../../reference/glossary.rst:53
msgid ""
"Also known as ``mpy-cross``. This tool runs on your PC and converts a "
":term:`.py file` containing MicroPython code into a :term:`.mpy file` "
"containing MicroPython bytecode. This means it loads faster (the board "
"doesn't have to compile the code), and uses less space on flash (the "
"bytecode is more space efficient)."
msgstr ""

#: ../../reference/glossary.rst:58
msgid "driver"
msgstr ""

#: ../../reference/glossary.rst:60
msgid ""
"A MicroPython library that implements support for a particular component,"
" such as a sensor or display."
msgstr ""

#: ../../reference/glossary.rst:62
msgid "FFI"
msgstr ""

#: ../../reference/glossary.rst:64
msgid ""
"Acronym for Foreign Function Interface. A mechanism used by the "
":term:`MicroPython Unix port` to access operating system functionality. "
"This is not available on :term:`baremetal` ports."
msgstr ""

#: ../../reference/glossary.rst:67
msgid "filesystem"
msgstr ""

#: ../../reference/glossary.rst:69
msgid ""
"Most MicroPython ports and boards provide a filesystem stored in flash "
"that is available to user code via the standard Python file APIs such as "
"``open()``. Some boards also make this internal filesystem accessible to "
"the host via USB mass-storage."
msgstr ""

#: ../../reference/glossary.rst:73
msgid "frozen module"
msgstr ""

#: ../../reference/glossary.rst:75
msgid ""
"A Python module that has been cross compiled and bundled into the "
"firmware image. This reduces RAM requirements as the code is executed "
"directly from flash."
msgstr ""

#: ../../reference/glossary.rst:78
msgid "Garbage Collector"
msgstr ""

#: ../../reference/glossary.rst:80
msgid ""
"A background process that runs in Python (and MicroPython) to reclaim "
"unused memory in the :term:`heap`."
msgstr ""

#: ../../reference/glossary.rst:82
msgid "GPIO"
msgstr ""

#: ../../reference/glossary.rst:84
msgid ""
"General-purpose input/output. The simplest means to control electrical "
"signals (commonly referred to as \"pins\") on a microcontroller. GPIO "
"typically allows pins to be either input or output, and to set or get "
"their digital value (logical \"0\" or \"1\"). MicroPython abstracts GPIO "
"access using the :class:`machine.Pin` and :class:`machine.Signal` "
"classes."
msgstr ""

#: ../../reference/glossary.rst:90
msgid "GPIO port"
msgstr ""

#: ../../reference/glossary.rst:92
msgid ""
"A group of :term:`GPIO` pins, usually based on hardware properties of "
"these pins (e.g. controllable by the same register)."
msgstr ""

#: ../../reference/glossary.rst:94
msgid "heap"
msgstr ""

#: ../../reference/glossary.rst:96
msgid ""
"A region of RAM where MicroPython stores dynamic data. It is managed "
"automatically by the :term:`Garbage Collector`. Different MCUs and boards"
" have vastly different amounts of RAM available for the heap, so this "
"will affect how complex your program can be."
msgstr ""

#: ../../reference/glossary.rst:100
msgid "interned string"
msgstr ""

#: ../../reference/glossary.rst:102
msgid ""
"An optimisation used by MicroPython to improve the efficiency of working "
"with strings. An interned string is referenced by its (unique) identity "
"rather than its address and can therefore be quickly compared just by its"
" identifier. It also means that identical strings can be de-duplicated in"
" memory. String interning is almost always invisible to the user."
msgstr ""

#: ../../reference/glossary.rst:108
msgid "MCU"
msgstr ""

#: ../../reference/glossary.rst:110
msgid ""
"Microcontroller. Microcontrollers usually have much less resources than a"
" desktop, laptop, or phone, but are smaller, cheaper and require much "
"less power. MicroPython is designed to be small and optimized enough to "
"run on an average modern microcontroller."
msgstr ""

#: ../../reference/glossary.rst:114
msgid "micropython-lib"
msgstr ""

#: ../../reference/glossary.rst:116
msgid ""
"MicroPython is (usually) distributed as a single executable/binary file "
"with just few builtin modules. There is no extensive standard library "
"comparable with :term:`CPython`'s. Instead, there is a related, but "
"separate project `micropython-lib <https://github.com/micropython"
"/micropython-lib>`_ which provides implementations for many modules from "
"CPython's standard library."
msgstr ""

#: ../../reference/glossary.rst:123
msgid ""
"Some of the modules are are implemented in pure Python, and are able to "
"be used on all ports. However, the majority of these modules use "
":term:`FFI` to access operating system functionality, and as such can "
"only be used on the :term:`MicroPython Unix port` (with limited support "
"for Windows)."
msgstr ""

#: ../../reference/glossary.rst:129
msgid ""
"Unlike the :term:`CPython` stdlib, micropython-lib modules are intended "
"to be installed individually - either using manual copying or using "
":term:`upip`."
msgstr ""

#: ../../reference/glossary.rst:132
msgid "MicroPython port"
msgstr ""

#: ../../reference/glossary.rst:134
msgid ""
"MicroPython supports different :term:`boards <board>`, RTOSes, and OSes, "
"and can be relatively easily adapted to new systems. MicroPython with "
"support for a particular system is called a \"port\" to that system. "
"Different ports may have widely different functionality. This "
"documentation is intended to be a reference of the generic APIs available"
" across different ports (\"MicroPython core\"). Note that some ports may "
"still omit some APIs described here (e.g. due to resource constraints). "
"Any such differences, and port-specific extensions beyond the MicroPython"
" core functionality, would be described in the separate port-specific "
"documentation."
msgstr ""

#: ../../reference/glossary.rst:144
msgid "MicroPython Unix port"
msgstr ""

#: ../../reference/glossary.rst:146
msgid ""
"The unix port is one of the major :term:`MicroPython ports <MicroPython "
"port>`. It is intended to run on POSIX-compatible operating systems, like"
" Linux, MacOS, FreeBSD, Solaris, etc. It also serves as the basis of "
"Windows port. The Unix port is very useful for quick development and "
"testing of the MicroPython language and machine-independent features. It "
"can also function in a similar way to :term:`CPython`'s ``python`` "
"executable."
msgstr ""

#: ../../reference/glossary.rst:153
msgid ".mpy file"
msgstr ""

#: ../../reference/glossary.rst:155
msgid ""
"The output of the :term:`cross-compiler`. A compiled form of a :term:`.py"
" file` that contains MicroPython bytecode instead of Python source code."
msgstr ""

#: ../../reference/glossary.rst:158
msgid "native"
msgstr ""

#: ../../reference/glossary.rst:160
msgid ""
"Usually refers to \"native code\", i.e. machine code for the target "
"microcontroller (such as ARM Thumb, Xtensa, x86/x64). The ``@native`` "
"decorator can be applied to a MicroPython function to generate native "
"code instead of bytecode for that function, which will likely be faster "
"but use more RAM."
msgstr ""

#: ../../reference/glossary.rst:165
msgid "port"
msgstr ""

#: ../../reference/glossary.rst:167
msgid ""
"Usually short for :term:`MicroPython port`, but could also refer to "
":term:`GPIO port`."
msgstr ""

#: ../../reference/glossary.rst:169
msgid ".py file"
msgstr ""

#: ../../reference/glossary.rst:171
msgid "A file containing Python source code."
msgstr ""

#: ../../reference/glossary.rst:172
msgid "REPL"
msgstr ""

#: ../../reference/glossary.rst:174
msgid ""
"An acronym for \"Read, Eval, Print, Loop\". This is the interactive "
"Python prompt, useful for debugging or testing short snippets of code. "
"Most MicroPython boards make a REPL available over a UART, and this is "
"typically accessible on a host PC via USB."
msgstr ""

#: ../../reference/glossary.rst:178
msgid "stream"
msgstr ""

#: ../../reference/glossary.rst:180
msgid ""
"Also known as a \"file-like object\". A Python object which provides "
"sequential read-write access to the underlying data. A stream object "
"implements a corresponding interface, which consists of methods like "
"``read()``, ``write()``, ``readinto()``, ``seek()``, ``flush()``, "
"``close()``, etc. A stream is an important concept in MicroPython; many "
"I/O objects implement the stream interface, and thus can be used "
"consistently and interchangeably in different contexts. For more "
"information on streams in MicroPython, see the `io` module."
msgstr ""

#: ../../reference/glossary.rst:188
msgid "UART"
msgstr ""

#: ../../reference/glossary.rst:190
msgid ""
"Acronym for \"Universal Asynchronous Receiver/Transmitter\". This is a "
"peripheral that sends data over a pair of pins (TX & RX). Many boards "
"include a way to make at least one of the UARTs available to a host PC as"
" a serial port over USB."
msgstr ""

#: ../../reference/glossary.rst:194
msgid "upip"
msgstr ""

#: ../../reference/glossary.rst:196
msgid ""
"(Literally, \"micro pip\"). A package manager for MicroPython, inspired "
"by :term:`CPython`'s pip, but much smaller and with reduced "
"functionality. upip runs both on the :term:`Unix port <MicroPython Unix "
"port>` and on :term:`baremetal` ports which offer filesystem and "
"networking support."
msgstr ""

