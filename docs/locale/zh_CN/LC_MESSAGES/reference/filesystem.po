# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/filesystem.rst:4
msgid "Working with filesystems"
msgstr ""

#: ../../reference/filesystem.rst:6
msgid "Contents"
msgstr ""

#: ../../reference/filesystem.rst:8
msgid ""
"This tutorial describes how MicroPython provides an on-device filesystem,"
" allowing standard Python file I/O methods to be used with persistent "
"storage."
msgstr ""

#: ../../reference/filesystem.rst:11
msgid ""
"MicroPython automatically creates a default configuration and auto-"
"detects the primary filesystem, so this tutorial will be mostly useful if"
" you want to modify the partitioning, filesystem type, or use custom "
"block devices."
msgstr ""

#: ../../reference/filesystem.rst:15
msgid ""
"The filesystem is typically backed by internal flash memory on the "
"device, but can also use external flash, RAM, or a custom block device."
msgstr ""

#: ../../reference/filesystem.rst:18
msgid ""
"On some ports (e.g. STM32), the filesystem may also be available over USB"
" MSC to a host PC. :ref:`pyboard_py` also provides a way for the host PC "
"to access to the filesystem on all ports."
msgstr ""

#: ../../reference/filesystem.rst:22
msgid ""
"Note: This is mainly for use on bare-metal ports like STM32 and ESP32. On"
" ports with an operating system (e.g. the Unix port) the filesystem is "
"provided by the host OS."
msgstr ""

#: ../../reference/filesystem.rst:27
msgid "VFS"
msgstr ""

#: ../../reference/filesystem.rst:29
msgid ""
"MicroPython implements a Unix-like Virtual File System (VFS) layer. All "
"mounted filesystems are combined into a single virtual filesystem, "
"starting at the root ``/``. Filesystems are mounted into directories in "
"this structure, and at startup the working directory is changed to where "
"the primary filesystem is mounted."
msgstr ""

#: ../../reference/filesystem.rst:35
msgid ""
"On STM32 / Pyboard, the internal flash is mounted at ``/flash``, and "
"optionally the SDCard at ``/sd``. On ESP8266/ESP32, the primary "
"filesystem is mounted at ``/``."
msgstr ""

#: ../../reference/filesystem.rst:40
msgid "Block devices"
msgstr ""

#: ../../reference/filesystem.rst:42
msgid ""
"A block device is an instance of a class that implements the "
":class:`os.AbstractBlockDev` protocol."
msgstr ""

#: ../../reference/filesystem.rst:46
msgid "Built-in block devices"
msgstr ""

#: ../../reference/filesystem.rst:48
msgid "Ports provide built-in block devices to access their primary flash."
msgstr ""

#: ../../reference/filesystem.rst:50
msgid ""
"On power-on, MicroPython will attempt to detect the filesystem on the "
"default flash and configure and mount it automatically. If no filesystem "
"is found, MicroPython will attempt to create a FAT filesystem spanning "
"the entire flash. Ports can also provide a mechanism to \"factory reset\""
" the primary flash, usually by some combination of button presses at "
"power on."
msgstr ""

#: ../../reference/filesystem.rst:57
msgid "STM32 / Pyboard"
msgstr ""

#: ../../reference/filesystem.rst:59
msgid ""
"The :ref:`pyb.Flash <pyb.Flash>` class provides access to the internal "
"flash. On some boards which have larger external flash (e.g. Pyboard D), "
"it will use that instead. The ``start`` kwarg should always be specified,"
" i.e. ``pyb.Flash(start=0)``."
msgstr ""

#: ../../reference/filesystem.rst:64
msgid ""
"Note: For backwards compatibility, when constructed with no arguments "
"(i.e. ``pyb.Flash()``), it only implements the simple block interface and"
" reflects the virtual device presented to USB MSC (i.e. it includes a "
"virtual partition table at the start)."
msgstr ""

#: ../../reference/filesystem.rst:70
msgid "ESP8266"
msgstr ""

#: ../../reference/filesystem.rst:72
msgid ""
"The internal flash is exposed as a block device object which is created "
"in the ``flashbdev`` module on start up. This object is by default added "
"as a global variable so it can usually be accessed simply as ``bdev``. "
"This implements the extended interface."
msgstr ""

#: ../../reference/filesystem.rst:78 ../../reference/filesystem.rst:183
msgid "ESP32"
msgstr ""

#: ../../reference/filesystem.rst:80
msgid ""
"The :class:`esp32.Partition` class implements a block device for "
"partitions defined for the board. Like ESP8266, there is a global "
"variable ``bdev`` which points to the default partition. This implements "
"the extended interface."
msgstr ""

#: ../../reference/filesystem.rst:85
msgid "Custom block devices"
msgstr ""

#: ../../reference/filesystem.rst:87
msgid ""
"The following class implements a simple block device that stores its data"
" in RAM using a ``bytearray``::"
msgstr ""

#: ../../reference/filesystem.rst:109
msgid "It can be used as follows::"
msgstr ""

#: ../../reference/filesystem.rst:117
msgid ""
"An example of a block device that supports both the simple and extended "
"interface (i.e. both signatures and behaviours of the "
":meth:`os.AbstractBlockDev.readblocks` and "
":meth:`os.AbstractBlockDev.writeblocks` methods) is::"
msgstr ""

#: ../../reference/filesystem.rst:150
msgid ""
"As it supports the extended interface, it can be used with "
":class:`littlefs <os.VfsLfs2>`::"
msgstr ""

#: ../../reference/filesystem.rst:159
msgid ""
"Once mounted, the filesystem (regardless of its type) can be used as it "
"normally would be used from Python code, for example::"
msgstr ""

#: ../../reference/filesystem.rst:167
msgid "Filesystems"
msgstr ""

#: ../../reference/filesystem.rst:169
msgid ""
"MicroPython ports can provide implementations of :class:`FAT "
"<os.VfsFat>`, :class:`littlefs v1 <os.VfsLfs1>` and :class:`littlefs v2 "
"<os.VfsLfs2>`."
msgstr ""

#: ../../reference/filesystem.rst:172
msgid ""
"The following table shows which filesystems are included in the firmware "
"by default for given port/board combinations, however they can be "
"optionally enabled in a custom firmware build."
msgstr ""

#: ../../reference/filesystem.rst:177
msgid "Board"
msgstr ""

#: ../../reference/filesystem.rst:177 ../../reference/filesystem.rst:187
msgid "FAT"
msgstr ""

#: ../../reference/filesystem.rst:177
msgid "littlefs v1"
msgstr ""

#: ../../reference/filesystem.rst:177
msgid "littlefs v2"
msgstr ""

#: ../../reference/filesystem.rst:179
msgid "pyboard 1.0, 1.1, D"
msgstr ""

#: ../../reference/filesystem.rst:179 ../../reference/filesystem.rst:180
#: ../../reference/filesystem.rst:181 ../../reference/filesystem.rst:182
#: ../../reference/filesystem.rst:183
msgid "Yes"
msgstr ""

#: ../../reference/filesystem.rst:179 ../../reference/filesystem.rst:180
#: ../../reference/filesystem.rst:181 ../../reference/filesystem.rst:182
#: ../../reference/filesystem.rst:183
msgid "No"
msgstr ""

#: ../../reference/filesystem.rst:180
msgid "Other STM32"
msgstr ""

#: ../../reference/filesystem.rst:181
msgid "ESP8266 (1M)"
msgstr ""

#: ../../reference/filesystem.rst:182
msgid "ESP8266 (2M+)"
msgstr ""

#: ../../reference/filesystem.rst:189
msgid ""
"The main advantage of the FAT filesystem is that it can be accessed over "
"USB MSC on supported boards (e.g. STM32) without any additional drivers "
"required on the host PC."
msgstr ""

#: ../../reference/filesystem.rst:193
msgid ""
"However, FAT is not tolerant to power failure during writes and this can "
"lead to filesystem corruption. For applications that do not require USB "
"MSC, it is recommended to use littlefs instead."
msgstr ""

#: ../../reference/filesystem.rst:197
msgid "To format the entire flash using FAT::"
msgstr ""

#: ../../reference/filesystem.rst:213
msgid "Littlefs"
msgstr ""

#: ../../reference/filesystem.rst:215
msgid ""
"Littlefs_ is a filesystem designed for flash-based devices, and is much "
"more resistant to filesystem corruption."
msgstr ""

#: ../../reference/filesystem.rst:218
msgid ""
"There are reports of littlefs v1 and v2 failing in certain situations, "
"for details see `littlefs issue 347`_  and `littlefs issue 295`_."
msgstr ""

#: ../../reference/filesystem.rst:222
msgid "To format the entire flash using littlefs v2::"
msgstr ""

#: ../../reference/filesystem.rst:237
msgid ""
"A littlefs filesystem can be still be accessed on a PC over USB MSC using"
" the `littlefs FUSE driver`_.  Note that you must specify both the "
"``--block_size`` and ``--block_count`` options to override the defaults."
"  For example (after building the littlefs-fuse executable)::"
msgstr ""

#: ../../reference/filesystem.rst:244
msgid ""
"This will allow the board's littlefs filesystem to be accessed at the "
"``mnt`` directory.  To get the correct values of ``block_size`` and "
"``block_count`` use::"
msgstr ""

#: ../../reference/filesystem.rst:259
msgid "Hybrid (STM32)"
msgstr ""

#: ../../reference/filesystem.rst:261
msgid ""
"By using the ``start`` and ``len`` kwargs to :class:`pyb.Flash`, you can "
"create block devices spanning a subset of the flash device."
msgstr ""

#: ../../reference/filesystem.rst:264
msgid ""
"For example, to configure the first 256kiB as FAT (and available over USB"
" MSC), and the remainder as littlefs::"
msgstr ""

#: ../../reference/filesystem.rst:277
msgid ""
"This might be useful to make your Python files, configuration and other "
"rarely-modified content available over USB MSC, but allowing for "
"frequently changing application data to reside on littlefs with better "
"resilience to power failure, etc."
msgstr ""

#: ../../reference/filesystem.rst:282
msgid ""
"The partition at offset ``0`` will be mounted automatically (and the "
"filesystem type automatically detected), but you can add::"
msgstr ""

#: ../../reference/filesystem.rst:289
msgid "to ``boot.py`` to mount the data partition."
msgstr ""

#: ../../reference/filesystem.rst:292
msgid "Hybrid (ESP32)"
msgstr ""

#: ../../reference/filesystem.rst:294
msgid ""
"On ESP32, if you build custom firmware, you can modify ``partitions.csv``"
" to define an arbitrary partition layout."
msgstr ""

#: ../../reference/filesystem.rst:297
msgid ""
"At boot, the partition named \"vfs\" will be mounted at ``/`` by default,"
" but any additional partitions can be mounted in your ``boot.py`` using::"
msgstr ""

