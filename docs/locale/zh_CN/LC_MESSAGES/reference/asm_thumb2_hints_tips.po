# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/asm_thumb2_hints_tips.rst:2
msgid "Hints and tips"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:4
msgid ""
"The following are some examples of the use of the inline assembler and "
"some information on how to work around its limitations. In this document "
"the term \"assembler function\" refers to a function declared in Python "
"with the ``@micropython.asm_thumb`` decorator, whereas \"subroutine\" "
"refers to assembler code called from within an assembler function."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:11
msgid "Code branches and subroutines"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:13
msgid ""
"It is important to appreciate that labels are local to an assembler "
"function. There is currently no way for a subroutine defined in one "
"function to be called from another."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:17
msgid ""
"To call a subroutine the instruction ``bl(LABEL)`` is issued. This "
"transfers control to the instruction following the ``label(LABEL)`` "
"directive and stores the return address in the link register (``lr`` or "
"``r14``). To return the instruction ``bx(lr)`` is issued which causes "
"execution to continue with the instruction following the subroutine call."
" This mechanism implies that, if a subroutine is to call another, it must"
" save the link register prior to the call and restore it before "
"terminating."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:25
msgid ""
"The following rather contrived example illustrates a function call. Note "
"that it's necessary at the start to branch around all subroutine calls: "
"subroutines end execution with ``bx(lr)`` while the outer function simply"
" \"drops off the end\" in the style of Python functions."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:44
msgid ""
"The following code example demonstrates a nested (recursive) call: the "
"classic Fibonacci sequence. Here, prior to a recursive call, the link "
"register is saved along with other registers which the program logic "
"requires to be preserved."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:74
msgid "Argument passing and return"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:76
msgid ""
"The tutorial details the fact that assembler functions can support from "
"zero to three arguments, which must (if used) be named ``r0``, ``r1`` and"
" ``r2``. When the code executes the registers will be initialised to "
"those values."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:80
msgid ""
"The data types which can be passed in this way are integers and memory "
"addresses. With current firmware all possible 32 bit values may be passed"
" and returned. If the return value may have the most significant bit set "
"a Python type hint should be employed to enable MicroPython to determine "
"whether the value should be interpreted as a signed or unsigned integer: "
"types are ``int`` or ``uint``."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:93
msgid ""
"``hex(uadd(0x40000000,0x40000000))`` will return 0x80000000, "
"demonstrating the passing and return of integers where bits 30 and 31 "
"differ."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:96
msgid ""
"The limitations on the number of arguments and return values can be "
"overcome by means of the ``array`` module which enables any number of "
"values of any type to be accessed."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:100
msgid "Multiple arguments"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:102
msgid ""
"If a Python array of integers is passed as an argument to an assembler "
"function, the function will receive the address of a contiguous set of "
"integers. Thus multiple arguments can be passed as elements of a single "
"array. Similarly a function can return multiple values by assigning them "
"to array elements. Assembler functions have no means of determining the "
"length of an array: this will need to be passed to the function."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:109
msgid ""
"This use of arrays can be extended to enable more than three arrays to be"
" used. This is done using indirection: the ``uctypes`` module supports "
"``addressof()`` which will return the address of an array passed as its "
"argument. Thus you can populate an integer array with the addresses of "
"other arrays:"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:129
msgid "Non-integer data types"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:131
msgid ""
"These may be handled by means of arrays of the appropriate data type. For"
" example, single precision floating point data may be processed as "
"follows. This code example takes an array of floats and replaces its "
"contents with their squares."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:154
msgid ""
"The uctypes module supports the use of data structures beyond simple "
"arrays. It enables a Python data structure to be mapped onto a bytearray "
"instance which may then be passed to the assembler function."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:159
msgid "Named constants"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:161
msgid ""
"Assembler code may be made more readable and maintainable by using named "
"constants rather than littering code with numbers. This may be achieved "
"thus:"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:173
msgid ""
"The const() construct causes MicroPython to replace the variable name "
"with its value at compile time. If constants are declared in an outer "
"Python scope they can be shared between multiple assembler functions and "
"with Python code."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:179
msgid "Assembler code as class methods"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:181
msgid ""
"MicroPython passes the address of the object instance as the first "
"argument to class methods. This is normally of little use to an assembler"
" function. It can be avoided by declaring the function as a static method"
" thus:"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:194
msgid "Use of unsupported instructions"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:196
msgid ""
"These can be coded using the data statement as shown below. While "
"``push()`` and ``pop()`` are supported the example below illustrates the "
"principle. The necessary machine code may be found in the ARM v7-M "
"Architecture Reference Manual. Note that the first argument of data calls"
" such as"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:206
msgid "indicates that each subsequent argument is a two byte quantity."
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:209
msgid "Overcoming MicroPython's integer restriction"
msgstr ""

#: ../../reference/asm_thumb2_hints_tips.rst:211
msgid ""
"The Pyboard chip includes a CRC generator. Its use presents a problem in "
"MicroPython because the returned values cover the full gamut of 32 bit "
"quantities whereas small integers in MicroPython cannot have differing "
"values in bits 30 and 31. This limitation is overcome with the following "
"code, which uses assembler to put the result into an array and Python "
"code to coerce the result into an arbitrary precision unsigned integer."
msgstr ""

