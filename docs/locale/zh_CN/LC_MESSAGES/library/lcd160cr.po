# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/lcd160cr.rst:2
msgid ":mod:`lcd160cr` --- control of LCD160CR display"
msgstr ""

#: ../../library/lcd160cr.rst:7
msgid "This module provides control of the MicroPython LCD160CR display."
msgstr ""

msgid "LCD160CRv1.0 picture"
msgstr ""

#: ../../library/lcd160cr.rst:13
msgid "Further resources are available via the following links:"
msgstr ""

#: ../../library/lcd160cr.rst:15
msgid ""
"`LCD160CRv1.0 reference manual "
"<http://micropython.org/resources/LCD160CRv10-refmanual.pdf>`_ (100KiB "
"PDF)"
msgstr ""

#: ../../library/lcd160cr.rst:16
msgid ""
"`LCD160CRv1.0 schematics "
"<http://micropython.org/resources/LCD160CRv10-schematics.pdf>`_ (1.6MiB "
"PDF)"
msgstr ""

#: ../../library/lcd160cr.rst:19
msgid "class LCD160CR"
msgstr ""

#: ../../library/lcd160cr.rst:21
msgid ""
"The LCD160CR class provides an interface to the display.  Create an "
"instance of this class and use its methods to draw to the LCD and get the"
" status of the touch panel."
msgstr ""

#: ../../library/lcd160cr.rst:25
msgid "For example::"
msgstr ""

#: ../../library/lcd160cr.rst:38
msgid "Constructors"
msgstr ""

#: ../../library/lcd160cr.rst:42
msgid "Construct an LCD160CR object.  The parameters are:"
msgstr ""

#: ../../library/lcd160cr.rst:44
msgid ""
"*connect* is a string specifying the physical connection of the LCD "
"display to the board; valid values are \"X\", \"Y\", \"XY\", \"YX\". Use "
"\"X\" when the display is connected to a pyboard in the X-skin position, "
"and \"Y\" when connected in the Y-skin position.  \"XY\" and \"YX\" are "
"used when the display is connected to the right or left side of the "
"pyboard, respectively."
msgstr ""

#: ../../library/lcd160cr.rst:50
msgid "*pwr* is a Pin object connected to the LCD's power/enabled pin."
msgstr ""

#: ../../library/lcd160cr.rst:51
msgid "*i2c* is an I2C object connected to the LCD's I2C interface."
msgstr ""

#: ../../library/lcd160cr.rst:52
msgid "*spi* is an SPI object connected to the LCD's SPI interface."
msgstr ""

#: ../../library/lcd160cr.rst:53
msgid "*i2c_addr* is the I2C address of the display."
msgstr ""

#: ../../library/lcd160cr.rst:55
msgid ""
"One must specify either a valid *connect* or all of *pwr*, *i2c* and "
"*spi*. If a valid *connect* is given then any of *pwr*, *i2c* or *spi* "
"which are not passed as parameters (i.e. they are ``None``) will be "
"created based on the value of *connect*.  This allows to override the "
"default interface to the display if needed."
msgstr ""

#: ../../library/lcd160cr.rst:61
msgid "The default values are:"
msgstr ""

#: ../../library/lcd160cr.rst:63
msgid ""
"\"X\" is for the X-skin and uses: ``pwr=Pin(\"X4\")``, "
"``i2c=I2C(\"X\")``, ``spi=SPI(\"X\")``"
msgstr ""

#: ../../library/lcd160cr.rst:65
msgid ""
"\"Y\" is for the Y-skin and uses: ``pwr=Pin(\"Y4\")``, "
"``i2c=I2C(\"Y\")``, ``spi=SPI(\"Y\")``"
msgstr ""

#: ../../library/lcd160cr.rst:67
msgid ""
"\"XY\" is for the right-side and uses: ``pwr=Pin(\"X4\")``, "
"``i2c=I2C(\"Y\")``, ``spi=SPI(\"X\")``"
msgstr ""

#: ../../library/lcd160cr.rst:69
msgid ""
"\"YX\" is for the left-side and uses: ``pwr=Pin(\"Y4\")``, "
"``i2c=I2C(\"X\")``, ``spi=SPI(\"Y\")``"
msgstr ""

#: ../../library/lcd160cr.rst:72
msgid ""
"See `this image "
"<http://micropython.org/resources/LCD160CRv10-positions.jpg>`_ for how "
"the display can be connected to the pyboard."
msgstr ""

#: ../../library/lcd160cr.rst:76
msgid "Static methods"
msgstr ""

#: ../../library/lcd160cr.rst:80
msgid ""
"Return a 16-bit integer representing the given rgb color values.  The "
"16-bit value can be used to set the font color (see "
":meth:`LCD160CR.set_text_color`) pen color (see :meth:`LCD160CR.set_pen`)"
" and draw individual pixels."
msgstr ""

#: ../../library/lcd160cr.rst:87
msgid "Clip the given line data.  This is for internal use."
msgstr ""

#: ../../library/lcd160cr.rst:90
msgid "Instance members"
msgstr ""

#: ../../library/lcd160cr.rst:92
msgid "The following instance members are publicly accessible."
msgstr ""

#: ../../library/lcd160cr.rst:97
msgid ""
"The width and height of the display, respectively, in pixels.  These "
"members are updated when calling :meth:`LCD160CR.set_orient` and should "
"be considered read-only."
msgstr ""

#: ../../library/lcd160cr.rst:102
msgid "Setup commands"
msgstr ""

#: ../../library/lcd160cr.rst:106
msgid ""
"Turn the display on or off, depending on the given value of *on*: 0 or "
"``False`` will turn the display off, and 1 or ``True`` will turn it on."
msgstr ""

#: ../../library/lcd160cr.rst:111
msgid ""
"Set the orientation of the display.  The *orient* parameter can be one of"
" `PORTRAIT`, `LANDSCAPE`, `PORTRAIT_UPSIDEDOWN`, `LANDSCAPE_UPSIDEDOWN`."
msgstr ""

#: ../../library/lcd160cr.rst:116
msgid "Set the brightness of the display, between 0 and 31."
msgstr ""

#: ../../library/lcd160cr.rst:120
msgid ""
"Set the I2C address of the display.  The *addr* value must have the lower"
" 2 bits cleared."
msgstr ""

#: ../../library/lcd160cr.rst:125
msgid "Set the baudrate of the UART interface."
msgstr ""

#: ../../library/lcd160cr.rst:129
msgid ""
"Set the start-up decoration of the display.  The *value* parameter can be"
" a logical or of `STARTUP_DECO_NONE`, `STARTUP_DECO_MLOGO`, "
"`STARTUP_DECO_INFO`."
msgstr ""

#: ../../library/lcd160cr.rst:134
msgid ""
"Save the following parameters to flash so they persist on restart and "
"power up: initial decoration, orientation, brightness, UART baud rate, "
"I2C address."
msgstr ""

#: ../../library/lcd160cr.rst:138
msgid "Pixel access methods"
msgstr ""

#: ../../library/lcd160cr.rst:140
msgid "The following methods manipulate individual pixels on the display."
msgstr ""

#: ../../library/lcd160cr.rst:144
msgid ""
"Set the specified pixel to the given color.  The color should be a 16-bit"
" integer and can be created by :meth:`LCD160CR.rgb`."
msgstr ""

#: ../../library/lcd160cr.rst:149
msgid "Get the 16-bit value of the specified pixel."
msgstr ""

#: ../../library/lcd160cr.rst:153
msgid ""
"Low-level method to get a line of pixels into the given buffer. To read "
"*n* pixels *buf* should be *2*n+1* bytes in length.  The first byte is a "
"dummy byte and should be ignored, and subsequent bytes represent the "
"pixels in the line starting at coordinate *(x, y)*."
msgstr ""

#: ../../library/lcd160cr.rst:160
msgid ""
"Dump the contents of the screen to the given buffer.  The parameters *x* "
"and *y* specify the starting coordinate, and *w* and *h* the size of the "
"region.  If *w* or *h* are ``None`` then they will take on their maximum "
"values, set by the size of the screen minus the given *x* and *y* values."
"  *buf* should be large enough to hold ``2*w*h`` bytes.  If it's smaller "
"then only the initial horizontal lines will be stored."
msgstr ""

#: ../../library/lcd160cr.rst:169
msgid "Load the entire screen from the given buffer."
msgstr ""

#: ../../library/lcd160cr.rst:172
msgid "Drawing text"
msgstr ""

#: ../../library/lcd160cr.rst:174
msgid ""
"To draw text one sets the position, color and font, and then uses "
"`LCD160CR.write` to draw the text."
msgstr ""

#: ../../library/lcd160cr.rst:179
msgid ""
"Set the position for text output using :meth:`LCD160CR.write`.  The "
"position is the upper-left corner of the text."
msgstr ""

#: ../../library/lcd160cr.rst:184
msgid "Set the foreground and background color of the text."
msgstr ""

#: ../../library/lcd160cr.rst:188
msgid ""
"Set the font for the text.  Subsequent calls to `write` will use the "
"newly configured font.  The parameters are:"
msgstr ""

#: ../../library/lcd160cr.rst:191
msgid "*font* is the font family to use, valid values are 0, 1, 2, 3."
msgstr ""

#: ../../library/lcd160cr.rst:192
msgid ""
"*scale* is a scaling value for each character pixel, where the pixels are"
" drawn as a square with side length equal to *scale + 1*.  The value can "
"be between 0 and 63."
msgstr ""

#: ../../library/lcd160cr.rst:195
msgid ""
"*bold* controls the number of pixels to overdraw each character pixel, "
"making a bold effect.  The lower 2 bits of *bold* are the number of "
"pixels to overdraw in the horizontal direction, and the next 2 bits are "
"for the vertical direction.  For example, a *bold* value of 5 will "
"overdraw 1 pixel in both the horizontal and vertical directions."
msgstr ""

#: ../../library/lcd160cr.rst:200
msgid ""
"*trans* can be either 0 or 1 and if set to 1 the characters will be drawn"
" with a transparent background."
msgstr ""

#: ../../library/lcd160cr.rst:202
msgid ""
"*scroll* can be either 0 or 1 and if set to 1 the display will do a soft "
"scroll if the text moves to the next line."
msgstr ""

#: ../../library/lcd160cr.rst:207
msgid ""
"Write text to the display, using the current position, color and font. As"
" text is written the position is automatically incremented.  The display "
"supports basic VT100 control codes such as newline and backspace."
msgstr ""

#: ../../library/lcd160cr.rst:212
msgid "Drawing primitive shapes"
msgstr ""

#: ../../library/lcd160cr.rst:214
msgid ""
"Primitive drawing commands use a foreground and background color set by "
"the `set_pen` method."
msgstr ""

#: ../../library/lcd160cr.rst:219
msgid "Set the line and fill color for primitive shapes."
msgstr ""

#: ../../library/lcd160cr.rst:223
msgid "Erase the entire display to the pen fill color."
msgstr ""

#: ../../library/lcd160cr.rst:227
msgid "Draw a single pixel at the given location using the pen line color."
msgstr ""

#: ../../library/lcd160cr.rst:233
msgid ""
"Draw a rectangle at the given location and size using the pen line color "
"for the outline, and the pen fill color for the interior. The `rect` "
"method draws the outline and interior, while the other methods just draw "
"one or the other."
msgstr ""

#: ../../library/lcd160cr.rst:240
msgid "Draw a line between the given coordinates using the pen line color."
msgstr ""

#: ../../library/lcd160cr.rst:248
msgid ""
"These methods are as above but don't do any clipping on the input "
"coordinates.  They are faster than the clipping versions and can be used "
"when you know that the coordinates are within the display."
msgstr ""

#: ../../library/lcd160cr.rst:254
msgid ""
"Draw a sequence of dots using the pen line color. The *data* should be a "
"buffer of bytes, with each successive pair of bytes corresponding to "
"coordinate pairs (x, y)."
msgstr ""

#: ../../library/lcd160cr.rst:260
msgid "Similar to :meth:`LCD160CR.poly_dot` but draws lines between the dots."
msgstr ""

#: ../../library/lcd160cr.rst:263
msgid "Touch screen methods"
msgstr ""

#: ../../library/lcd160cr.rst:267
msgid "Configure the touch panel:"
msgstr ""

#: ../../library/lcd160cr.rst:269
msgid ""
"If *calib* is ``True`` then the call will trigger a touch calibration of "
"the resistive touch sensor.  This requires the user to touch various "
"parts of the screen."
msgstr ""

#: ../../library/lcd160cr.rst:272
msgid ""
"If *save* is ``True`` then the touch parameters will be saved to NVRAM to"
" persist across reset/power up."
msgstr ""

#: ../../library/lcd160cr.rst:274
msgid ""
"If *irq* is ``True`` then the display will be configured to pull the IRQ "
"line low when a touch force is detected.  If *irq* is ``False`` then this"
" feature is disabled.  If *irq* is ``None`` (the default value) then no "
"change is made to this setting."
msgstr ""

#: ../../library/lcd160cr.rst:281
msgid ""
"Returns a boolean: ``True`` if there is currently a touch force on the "
"screen, ``False`` otherwise."
msgstr ""

#: ../../library/lcd160cr.rst:286
msgid ""
"Returns a 3-tuple of: *(active, x, y)*.  If there is currently a touch "
"force on the screen then *active* is 1, otherwise it is 0.  The *x* and "
"*y* values indicate the position of the current or most recent touch."
msgstr ""

#: ../../library/lcd160cr.rst:291
msgid "Advanced commands"
msgstr ""

#: ../../library/lcd160cr.rst:295
msgid "Set the window that SPI data is written to."
msgstr ""

#: ../../library/lcd160cr.rst:299
msgid ""
"Ready the display to accept RGB pixel data on the SPI bus, resetting the "
"location of the first byte to go to the top-left corner of the window set"
" by :meth:`LCD160CR.set_spi_win`. The method returns an SPI object which "
"can be used to write the pixel data."
msgstr ""

#: ../../library/lcd160cr.rst:304
msgid ""
"Pixels should be sent as 16-bit RGB values in the 5-6-5 format.  The "
"destination counter will increase as data is sent, and data can be sent "
"in arbitrary sized chunks.  Once the destination counter reaches the end "
"of the window specified by :meth:`LCD160CR.set_spi_win` it will wrap "
"around to the top-left corner of that window."
msgstr ""

#: ../../library/lcd160cr.rst:311
msgid ""
"Show the given buffer on the display.  *buf* should be an array of bytes "
"containing the 16-bit RGB values for the pixels, and they will be written"
" to the area specified by :meth:`LCD160CR.set_spi_win`, starting from the"
" top-left corner."
msgstr ""

#: ../../library/lcd160cr.rst:315
msgid ""
"The `framebuf <framebuf.html>`_ module can be used to construct frame "
"buffers and provides drawing primitives. Using a frame buffer will "
"improve performance of animations when compared to drawing directly to "
"the screen."
msgstr ""

#: ../../library/lcd160cr.rst:321
msgid ""
"Turn scrolling on or off.  This controls globally whether any window "
"regions will scroll."
msgstr ""

#: ../../library/lcd160cr.rst:326
msgid "Configure a window region for scrolling:"
msgstr ""

#: ../../library/lcd160cr.rst:328
msgid ""
"*win* is the window id to configure.  There are 0..7 standard windows for"
" general purpose use.  Window 8 is the text scroll window (the ticker)."
msgstr ""

#: ../../library/lcd160cr.rst:330
msgid "*x*, *y*, *w*, *h* specify the location of the window in the display."
msgstr ""

#: ../../library/lcd160cr.rst:331
msgid ""
"*vec* specifies the direction and speed of scroll: it is a 16-bit value "
"of the form ``0bF.ddSSSSSSSSSSSS``.  *dd* is 0, 1, 2, 3 for +x, +y, -x, "
"-y scrolling. *F* sets the speed format, with 0 meaning that the window "
"is shifted *S % 256* pixel every frame, and 1 meaning that the window is "
"shifted 1 pixel every *S* frames."
msgstr ""

#: ../../library/lcd160cr.rst:336
msgid "*pat* is a 16-bit pattern mask for the background."
msgstr ""

#: ../../library/lcd160cr.rst:337
msgid "*fill* is the fill color."
msgstr ""

#: ../../library/lcd160cr.rst:338
msgid "*color* is the extra color, either of the text or pattern foreground."
msgstr ""

#: ../../library/lcd160cr.rst:342
msgid "Set a single parameter of a scrolling window region:"
msgstr ""

#: ../../library/lcd160cr.rst:344
msgid "*win* is the window id, 0..8."
msgstr ""

#: ../../library/lcd160cr.rst:345
msgid ""
"*param* is the parameter number to configure, 0..7, and corresponds to "
"the parameters in the `set_scroll_win` method."
msgstr ""

#: ../../library/lcd160cr.rst:347
msgid "*value* is the value to set."
msgstr ""

#: ../../library/lcd160cr.rst:351
msgid ""
"Set the string for scrolling in window 8.  The parameter *s* must be a "
"string with length 32 or less."
msgstr ""

#: ../../library/lcd160cr.rst:356
msgid ""
"Display a JPEG.  *buf* should contain the entire JPEG data. JPEG data "
"should not include EXIF information. The following encodings are "
"supported: Baseline DCT, Huffman coding, 8 bits per sample, 3 color "
"components, YCbCr4:2:2. The origin of the JPEG is set by "
":meth:`LCD160CR.set_pos`."
msgstr ""

#: ../../library/lcd160cr.rst:364
msgid ""
"Display a JPEG with the data split across multiple buffers.  There must "
"be a single call to `jpeg_start` to begin with, specifying the total "
"number of bytes in the JPEG.  Then this number of bytes must be "
"transferred to the display using one or more calls to the `jpeg_data` "
"command."
msgstr ""

#: ../../library/lcd160cr.rst:371
msgid ""
"The first call to this method will start the display's internal watchdog "
"timer.  Subsequent calls will feed the watchdog.  The timeout is roughly "
"30 seconds."
msgstr ""

#: ../../library/lcd160cr.rst:377
msgid "Reset the display."
msgstr ""

#: ../../library/lcd160cr.rst:380
msgid "Constants"
msgstr ""

#: ../../library/lcd160cr.rst:387
msgid "Orientations of the display, used by :meth:`LCD160CR.set_orient`."
msgstr ""

#: ../../library/lcd160cr.rst:393
msgid ""
"Types of start-up decoration, can be OR'ed together, used by "
":meth:`LCD160CR.set_startup_deco`."
msgstr ""

