# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/machine.rst:2
msgid ":mod:`machine` --- functions related to the hardware"
msgstr ""

#: ../../library/machine.rst:7
msgid ""
"The ``machine`` module contains specific functions related to the "
"hardware on a particular board. Most functions in this module allow to "
"achieve direct and unrestricted access to and control of hardware blocks "
"on a system (like CPU, timers, buses, etc.). Used incorrectly, this can "
"lead to malfunction, lockups, crashes of your board, and in extreme "
"cases, hardware damage."
msgstr ""

#: ../../library/machine.rst:16
msgid ""
"A note of callbacks used by functions and class methods of :mod:`machine`"
" module: all these callbacks should be considered as executing in an "
"interrupt context. This is true for both physical devices with IDs >= 0 "
"and \"virtual\" devices with negative IDs like -1 (these \"virtual\" "
"devices are still thin shims on top of real hardware and real hardware "
"interrupts). See :ref:`isr_rules`."
msgstr ""

#: ../../library/machine.rst:23
msgid "Reset related functions"
msgstr ""

#: ../../library/machine.rst:27
msgid ""
"Resets the device in a manner similar to pushing the external RESET "
"button."
msgstr ""

#: ../../library/machine.rst:32
msgid ""
"Performs a soft reset of the interpreter, deleting all Python objects and"
" resetting the Python heap.  It tries to retain the method by which the "
"user is connected to the MicroPython REPL (eg serial, USB, Wifi)."
msgstr ""

#: ../../library/machine.rst:38
msgid ""
"Get the reset cause. See :ref:`constants <machine_constants>` for the "
"possible return values."
msgstr ""

#: ../../library/machine.rst:42
msgid ""
"Reset the device and enter its bootloader.  This is typically used to put"
" the device into a state where it can be programmed with new firmware."
msgstr ""

#: ../../library/machine.rst:45
msgid ""
"Some ports support passing in an optional *value* argument which can "
"control which bootloader to enter, what to pass to it, or other things."
msgstr ""

#: ../../library/machine.rst:49
msgid "Interrupt related functions"
msgstr ""

#: ../../library/machine.rst:53
msgid ""
"Disable interrupt requests. Returns the previous IRQ state which should "
"be considered an opaque value. This return value should be passed to the "
"`enable_irq()` function to restore interrupts to their original state, "
"before `disable_irq()` was called."
msgstr ""

#: ../../library/machine.rst:60
msgid ""
"Re-enable interrupt requests. The *state* parameter should be the value "
"that was returned from the most recent call to the `disable_irq()` "
"function."
msgstr ""

#: ../../library/machine.rst:65
msgid "Power related functions"
msgstr ""

#: ../../library/machine.rst:69
msgid "Returns the CPU frequency in hertz."
msgstr ""

#: ../../library/machine.rst:71
msgid ""
"On some ports this can also be used to set the CPU frequency by passing "
"in *hz*."
msgstr ""

#: ../../library/machine.rst:75
msgid ""
"Gates the clock to the CPU, useful to reduce power consumption at any "
"time during short or long periods. Peripherals continue working and "
"execution resumes as soon as any interrupt is triggered (on many ports "
"this includes system timer interrupt occurring at regular intervals on "
"the order of millisecond)."
msgstr ""

#: ../../library/machine.rst:82
msgid "This function is deprecated, use `lightsleep()` instead with no arguments."
msgstr ""

#: ../../library/machine.rst:87
msgid "Stops execution in an attempt to enter a low power state."
msgstr ""

#: ../../library/machine.rst:89
msgid ""
"If *time_ms* is specified then this will be the maximum time in "
"milliseconds that the sleep will last for.  Otherwise the sleep can last "
"indefinitely."
msgstr ""

#: ../../library/machine.rst:92
msgid ""
"With or without a timeout, execution may resume at any time if there are "
"events that require processing.  Such events, or wake sources, should be "
"configured before sleeping, like `Pin` change or `RTC` timeout."
msgstr ""

#: ../../library/machine.rst:96
msgid ""
"The precise behaviour and power-saving capabilities of lightsleep and "
"deepsleep is highly dependent on the underlying hardware, but the general"
" properties are:"
msgstr ""

#: ../../library/machine.rst:99
msgid ""
"A lightsleep has full RAM and state retention.  Upon wake execution is "
"resumed from the point where the sleep was requested, with all subsystems"
" operational."
msgstr ""

#: ../../library/machine.rst:102
msgid ""
"A deepsleep may not retain RAM or any other state of the system (for "
"example peripherals or network interfaces).  Upon wake execution is "
"resumed from the main script, similar to a hard or power-on reset. The "
"`reset_cause()` function will return `machine.DEEPSLEEP` and this can be "
"used to distinguish a deepsleep wake from other resets."
msgstr ""

#: ../../library/machine.rst:110
msgid ""
"Get the wake reason. See :ref:`constants <machine_constants>` for the "
"possible return values."
msgstr ""

#: ../../library/machine.rst:112
msgid "Availability: ESP32, WiPy."
msgstr ""

#: ../../library/machine.rst:115
msgid "Miscellaneous functions"
msgstr ""

#: ../../library/machine.rst:119
msgid ""
"Returns a byte string with a unique identifier of a board/SoC. It will "
"vary from a board/SoC instance to another, if underlying hardware allows."
" Length varies by hardware (so use substring of a full value if you "
"expect a short ID). In some MicroPython ports, ID corresponds to the "
"network MAC address."
msgstr ""

#: ../../library/machine.rst:126
msgid ""
"Time a pulse on the given *pin*, and return the duration of the pulse in "
"microseconds.  The *pulse_level* argument should be 0 to time a low pulse"
" or 1 to time a high pulse."
msgstr ""

#: ../../library/machine.rst:130
msgid ""
"If the current input value of the pin is different to *pulse_level*, the "
"function first (*) waits until the pin input becomes equal to "
"*pulse_level*, then (**) times the duration that the pin is equal to "
"*pulse_level*. If the pin is already equal to *pulse_level* then timing "
"starts straight away."
msgstr ""

#: ../../library/machine.rst:135
msgid ""
"The function will return -2 if there was timeout waiting for condition "
"marked (*) above, and -1 if there was timeout during the main "
"measurement, marked (**) above. The timeout is the same for both cases "
"and given by *timeout_us* (which is in microseconds)."
msgstr ""

#: ../../library/machine.rst:142
msgid ""
"Transmits *data* by bit-banging the specified *pin*. The *encoding* "
"argument specifies how the bits are encoded, and *timing* is an encoding-"
"specific timing specification."
msgstr ""

#: ../../library/machine.rst:146
msgid "The supported encodings are:"
msgstr ""

#: ../../library/machine.rst:148
msgid ""
"``0`` for \"high low\" pulse duration modulation. This will transmit 0 "
"and 1 bits as timed pulses, starting with the most significant bit. The "
"*timing* must be a four-tuple of nanoseconds in the format "
"``(high_time_0, low_time_0, high_time_1, low_time_1)``. For example, "
"``(400, 850, 800, 450)`` is the timing specification for WS2812 RGB LEDs "
"at 800kHz."
msgstr ""

#: ../../library/machine.rst:155
msgid ""
"The accuracy of the timing varies between ports. On Cortex M0 at 48MHz, "
"it is at best +/- 120ns, however on faster MCUs (ESP8266, ESP32, STM32, "
"Pyboard), it will be closer to +/-30ns."
msgstr ""

#: ../../library/machine.rst:159
msgid ""
"For controlling WS2812 / NeoPixel strips, see the :mod:`neopixel` module "
"for a higher-level API."
msgstr ""

#: ../../library/machine.rst:164
msgid "Return a 24-bit software generated random number."
msgstr ""

#: ../../library/machine.rst:166
msgid "Availability: WiPy."
msgstr ""

#: ../../library/machine.rst:171
msgid "Constants"
msgstr ""

#: ../../library/machine.rst:177
msgid "IRQ wake values."
msgstr ""

#: ../../library/machine.rst:185
msgid "Reset causes."
msgstr ""

#: ../../library/machine.rst:191
msgid "Wake-up reasons."
msgstr ""

#: ../../library/machine.rst:194
msgid "Classes"
msgstr ""

