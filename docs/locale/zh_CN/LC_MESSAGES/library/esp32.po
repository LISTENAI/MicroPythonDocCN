# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/esp32.rst:4
msgid ":mod:`esp32` --- functionality specific to the ESP32"
msgstr ""

#: ../../library/esp32.rst:9
msgid ""
"The ``esp32`` module contains functions and classes specifically aimed at"
" controlling ESP32 modules."
msgstr ""

#: ../../library/esp32.rst:14
msgid "Functions"
msgstr ""

#: ../../library/esp32.rst:18
msgid ""
"Configure whether or not a touch will wake the device from sleep. *wake* "
"should be a boolean value."
msgstr ""

#: ../../library/esp32.rst:23
msgid ""
"Configure how EXT0 wakes the device from sleep.  *pin* can be ``None`` or"
" a valid Pin object.  *level* should be ``esp32.WAKEUP_ALL_LOW`` or "
"``esp32.WAKEUP_ANY_HIGH``."
msgstr ""

#: ../../library/esp32.rst:29
msgid ""
"Configure how EXT1 wakes the device from sleep.  *pins* can be ``None`` "
"or a tuple/list of valid Pin objects.  *level* should be "
"``esp32.WAKEUP_ALL_LOW`` or ``esp32.WAKEUP_ANY_HIGH``."
msgstr ""

#: ../../library/esp32.rst:35
msgid ""
"Read the raw value of the internal temperature sensor, returning an "
"integer."
msgstr ""

#: ../../library/esp32.rst:39
msgid "Read the raw value of the internal Hall sensor, returning an integer."
msgstr ""

#: ../../library/esp32.rst:43
msgid ""
"Returns information about the ESP-IDF heap memory regions. One of them "
"contains the MicroPython heap and the others are used by ESP-IDF, e.g., "
"for network buffers and other data. This data is useful to get a sense of"
" how much memory is available to ESP-IDF and the networking stack in "
"particular. It may shed some light on situations where ESP-IDF operations"
" fail due to allocation failures. The information returned is *not* "
"useful to troubleshoot Python allocation failures, use "
"`micropython.mem_info()` instead."
msgstr ""

#: ../../library/esp32.rst:51
msgid ""
"The capabilities parameter corresponds to ESP-IDF's ``MALLOC_CAP_XXX`` "
"values but the two most useful ones are predefined as `esp32.HEAP_DATA` "
"for data heap regions and `esp32.HEAP_EXEC` for executable regions as "
"used by the native code emitter."
msgstr ""

#: ../../library/esp32.rst:55
msgid ""
"The return value is a list of 4-tuples, where each 4-tuple corresponds to"
" one heap and contains: the total bytes, the free bytes, the largest free"
" block, and the minimum free seen over time."
msgstr ""

#: ../../library/esp32.rst:59
msgid "Example after booting::"
msgstr ""

#: ../../library/esp32.rst:66
msgid "Flash partitions"
msgstr ""

#: ../../library/esp32.rst:68
msgid ""
"This class gives access to the partitions in the device's flash memory "
"and includes methods to enable over-the-air (OTA) updates."
msgstr ""

#: ../../library/esp32.rst:73
msgid ""
"Create an object representing a partition.  *id* can be a string which is"
" the label of the partition to retrieve, or one of the constants: "
"``BOOT`` or ``RUNNING``."
msgstr ""

#: ../../library/esp32.rst:78
msgid ""
"Find a partition specified by *type*, *subtype* and *label*.  Returns a "
"(possibly empty) list of Partition objects. Note: ``subtype=0xff`` "
"matches any subtype and ``label=None`` matches any label."
msgstr ""

#: ../../library/esp32.rst:84
msgid "Returns a 6-tuple ``(type, subtype, addr, size, label, encrypted)``."
msgstr ""

#: ../../library/esp32.rst:92
msgid ""
"These methods implement the simple and :ref:`extended <block-device-"
"interface>` block protocol defined by :class:`os.AbstractBlockDev`."
msgstr ""

#: ../../library/esp32.rst:98
msgid "Sets the partition as the boot partition."
msgstr ""

#: ../../library/esp32.rst:102
msgid ""
"Gets the next update partition after this one, and returns a new "
"Partition object. Typical usage is "
"``Partition(Partition.RUNNING).get_next_update()`` which returns the next"
" partition to update given the current running one."
msgstr ""

#: ../../library/esp32.rst:108
msgid ""
"Signals that the current boot is considered successful. Calling "
"``mark_app_valid_cancel_rollback`` is required on the first boot of a new"
" partition to avoid an automatic rollback at the next boot. This uses the"
" ESP-IDF \"app rollback\" feature with "
"\"CONFIG_BOOTLOADER_APP_ROLLBACK_ENABLE\" and  an ``OSError(-261)`` is "
"raised if called on firmware that doesn't have the feature enabled. It is"
" OK to call ``mark_app_valid_cancel_rollback`` on every boot and it is "
"not necessary when booting firmare that was loaded using esptool."
msgstr ""

#: ../../library/esp32.rst:118 ../../library/esp32.rst:286
msgid "Constants"
msgstr ""

#: ../../library/esp32.rst:123
msgid ""
"Used in the `Partition` constructor to fetch various partitions: ``BOOT``"
" is the partition that will be booted at the next reset and ``RUNNING`` "
"is the currently running partition."
msgstr ""

#: ../../library/esp32.rst:130
msgid ""
"Used in `Partition.find` to specify the partition type: ``APP`` is for "
"bootable firmware partitions (typically labelled ``factory``, ``ota_0``, "
"``ota_1``), and ``DATA`` is for other partitions, e.g. ``nvs``, "
"``otadata``, ``phy_init``, ``vfs``."
msgstr ""

#: ../../library/esp32.rst:137
msgid "Used in `idf_heap_info`."
msgstr ""

#: ../../library/esp32.rst:142
msgid "RMT"
msgstr ""

#: ../../library/esp32.rst:144
msgid ""
"The RMT (Remote Control) module, specific to the ESP32, was originally "
"designed to send and receive infrared remote control signals. However, "
"due to a flexible design and very accurate (as low as 12.5ns) pulse "
"generation, it can also be used to transmit or receive many other types "
"of digital signals::"
msgstr ""

#: ../../library/esp32.rst:161
msgid ""
"The input to the RMT module is an 80MHz clock (in the future it may be "
"able to configure the input clock but, for now, it's fixed). "
"``clock_div`` *divides* the clock input which determines the resolution "
"of the RMT channel. The numbers specified in ``write_pulses`` are "
"multiplied by the resolution to define the pulses."
msgstr ""

#: ../../library/esp32.rst:167
msgid ""
"``clock_div`` is an 8-bit divider (0-255) and each pulse can be defined "
"by multiplying the resolution by a 15-bit (0-32,768) number. There are "
"eight channels (0-7) and each can have a different clock divider."
msgstr ""

#: ../../library/esp32.rst:171
msgid ""
"So, in the example above, the 80MHz clock is divided by 8. Thus the "
"resolution is (1/(80Mhz/8)) 100ns. Since the ``start`` level is 0 and "
"toggles with each number, the bitstream is ``0101`` with durations of "
"[100ns, 2000ns, 100ns, 4000ns]."
msgstr ""

#: ../../library/esp32.rst:176
msgid ""
"For more details see Espressif's `ESP-IDF RMT documentation. "
"<https://docs.espressif.com/projects/esp-idf/en/latest/api-"
"reference/peripherals/rmt.html>`_."
msgstr ""

#: ../../library/esp32.rst:180
msgid ""
"The current MicroPython RMT implementation lacks some features, most "
"notably receiving pulses. RMT should be considered a *beta feature* and "
"the interface may change in the future."
msgstr ""

#: ../../library/esp32.rst:187
msgid ""
"This class provides access to one of the eight RMT channels. *channel* is"
" required and identifies which RMT channel (0-7) will be configured. "
"*pin*, also required, configures which Pin is bound to the RMT channel. "
"*clock_div* is an 8-bit clock divider that divides the source clock "
"(80MHz) to the RMT channel allowing the resolution to be specified. "
"*idle_level* specifies what level the output will be when no transmission"
" is in progress and can be any value that converts to a boolean, with "
"``True`` representing high voltage and ``False`` representing low."
msgstr ""

#: ../../library/esp32.rst:196
msgid ""
"To enable the transmission carrier feature, *tx_carrier* should be a "
"tuple of three positive integers: carrier frequency, duty percent (``0`` "
"to ``100``) and the output level to apply the carrier to (a boolean as "
"per *idle_level*)."
msgstr ""

#: ../../library/esp32.rst:203
msgid ""
"Returns the source clock frequency. Currently the source clock is not "
"configurable so this will always return 80MHz."
msgstr ""

#: ../../library/esp32.rst:208
msgid ""
"Return the clock divider. Note that the channel resolution is ``1 / "
"(source_freq / clock_div)``."
msgstr ""

#: ../../library/esp32.rst:213
msgid ""
"Returns ``True`` if the channel is idle or ``False`` if a sequence of "
"pulses started with `RMT.write_pulses` is being transmitted. If the "
"*timeout* keyword argument is given then block for up to this many "
"milliseconds for transmission to complete."
msgstr ""

#: ../../library/esp32.rst:220
msgid ""
"Configure looping on the channel. *enable_loop* is bool, set to ``True`` "
"to enable looping on the *next* call to `RMT.write_pulses`. If called "
"with ``False`` while a looping sequence is currently being transmitted "
"then the current loop iteration will be completed and then transmission "
"will stop."
msgstr ""

#: ../../library/esp32.rst:227
msgid "Begin transmitting a sequence. There are three ways to specify this:"
msgstr ""

#: ../../library/esp32.rst:229
msgid ""
"**Mode 1:** *duration* is a list or tuple of durations. The optional "
"*data* argument specifies the initial output level. The output level will"
" toggle after each duration."
msgstr ""

#: ../../library/esp32.rst:233
msgid ""
"**Mode 2:** *duration* is a positive integer and *data* is a list or "
"tuple of output levels. *duration* specifies a fixed duration for each."
msgstr ""

#: ../../library/esp32.rst:236
msgid ""
"**Mode 3:** *duration* and *data* are lists or tuples of equal length, "
"specifying individual durations and the output level for each."
msgstr ""

#: ../../library/esp32.rst:239
msgid ""
"Durations are in integer units of the channel resolution (as described "
"above), between 1 and 32767 units. Output levels are any value that can "
"be converted to a boolean, with ``True`` representing high voltage and "
"``False`` representing low."
msgstr ""

#: ../../library/esp32.rst:244
msgid ""
"If transmission of an earlier sequence is in progress then this method "
"will block until that transmission is complete before beginning the new "
"sequence."
msgstr ""

#: ../../library/esp32.rst:247
msgid ""
"If looping has been enabled with `RMT.loop`, the sequence will be "
"repeated indefinitely. Further calls to this method will block until the "
"end of the current loop iteration before immediately beginning to loop "
"the new sequence of pulses. Looping sequences longer than 126 pulses is "
"not supported by the hardware."
msgstr ""

#: ../../library/esp32.rst:255
msgid ""
"Select which RMT channel is used by the `machine.bitstream` "
"implementation. *value* can be ``None`` or a valid RMT channel number.  "
"The default RMT channel is the highest numbered one."
msgstr ""

#: ../../library/esp32.rst:259
msgid ""
"Passing in ``None`` disables the use of RMT and instead selects a bit-"
"banging implementation for `machine.bitstream`."
msgstr ""

#: ../../library/esp32.rst:262
msgid ""
"Passing in no argument will not change the channel.  This function "
"returns the current channel number."
msgstr ""

#: ../../library/esp32.rst:266
msgid "Ultra-Low-Power co-processor"
msgstr ""

#: ../../library/esp32.rst:270
msgid "This class provides access to the Ultra-Low-Power co-processor."
msgstr ""

#: ../../library/esp32.rst:274
msgid "Set the wake-up period."
msgstr ""

#: ../../library/esp32.rst:278
msgid "Load a *program_binary* into the ULP at the given *load_addr*."
msgstr ""

#: ../../library/esp32.rst:282
msgid "Start the ULP running at the given *entry_point*."
msgstr ""

#: ../../library/esp32.rst:291
msgid "Selects the wake level for pins."
msgstr ""

#: ../../library/esp32.rst:294
msgid "Non-Volatile Storage"
msgstr ""

#: ../../library/esp32.rst:296
msgid ""
"This class gives access to the Non-Volatile storage managed by ESP-IDF. "
"The NVS is partitioned into namespaces and each namespace contains typed "
"key-value pairs. The keys are strings and the values may be various "
"integer types, strings, and binary blobs. The driver currently only "
"supports 32-bit signed integers and blobs."
msgstr ""

#: ../../library/esp32.rst:303
msgid ""
"Changes to NVS need to be committed to flash by calling the commit "
"method. Failure to call commit results in changes being lost at the next "
"reset."
msgstr ""

#: ../../library/esp32.rst:308
msgid ""
"Create an object providing access to a namespace (which is automatically "
"created if not present)."
msgstr ""

#: ../../library/esp32.rst:313
msgid ""
"Sets a 32-bit signed integer value for the specified key. Remember to "
"call *commit*!"
msgstr ""

#: ../../library/esp32.rst:317
msgid ""
"Returns the signed integer value for the specified key. Raises an OSError"
" if the key does not exist or has a different type."
msgstr ""

#: ../../library/esp32.rst:322
msgid ""
"Sets a binary blob value for the specified key. The value passed in must "
"support the buffer protocol, e.g. bytes, bytearray, str. (Note that esp-"
"idf distinguishes blobs and strings, this method always writes a blob "
"even if a string is passed in as value.) Remember to call *commit*!"
msgstr ""

#: ../../library/esp32.rst:329
msgid ""
"Reads the value of the blob for the specified key into the buffer, which "
"must be a bytearray. Returns the actual length read. Raises an OSError if"
" the key does not exist, has a different type, or if the buffer is too "
"small."
msgstr ""

#: ../../library/esp32.rst:335
msgid "Erases a key-value pair."
msgstr ""

#: ../../library/esp32.rst:339
msgid "Commits changes made by *set_xxx* methods to flash."
msgstr ""

