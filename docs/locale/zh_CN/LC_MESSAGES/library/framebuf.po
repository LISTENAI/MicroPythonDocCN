# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/framebuf.rst:2
msgid ":mod:`framebuf` --- frame buffer manipulation"
msgstr ""

#: ../../library/framebuf.rst:7
msgid ""
"This module provides a general frame buffer which can be used to create "
"bitmap images, which can then be sent to a display."
msgstr ""

#: ../../library/framebuf.rst:11
msgid "class FrameBuffer"
msgstr ""

#: ../../library/framebuf.rst:13
msgid ""
"The FrameBuffer class provides a pixel buffer which can be drawn upon "
"with pixels, lines, rectangles, text and even other FrameBuffer's. It is "
"useful when generating output for displays."
msgstr ""

#: ../../library/framebuf.rst:17
msgid "For example::"
msgstr ""

#: ../../library/framebuf.rst:29
msgid "Constructors"
msgstr ""

#: ../../library/framebuf.rst:33
msgid "Construct a FrameBuffer object.  The parameters are:"
msgstr ""

#: ../../library/framebuf.rst:35
msgid ""
"*buffer* is an object with a buffer protocol which must be large enough "
"to contain every pixel defined by the width, height and format of the "
"FrameBuffer."
msgstr ""

#: ../../library/framebuf.rst:38
msgid "*width* is the width of the FrameBuffer in pixels"
msgstr ""

#: ../../library/framebuf.rst:39
msgid "*height* is the height of the FrameBuffer in pixels"
msgstr ""

#: ../../library/framebuf.rst:40
msgid ""
"*format* specifies the type of pixel used in the FrameBuffer; permissible"
" values are listed under Constants below. These set the number of bits "
"used to encode a color value and the layout of these bits in *buffer*. "
"Where a color value c is passed to a method, c is a small integer with an"
" encoding that is dependent on the format of the FrameBuffer."
msgstr ""

#: ../../library/framebuf.rst:46
msgid ""
"*stride* is the number of pixels between each horizontal line of pixels "
"in the FrameBuffer. This defaults to *width* but may need adjustments "
"when implementing a FrameBuffer within another larger FrameBuffer or "
"screen. The *buffer* size must accommodate an increased step size."
msgstr ""

#: ../../library/framebuf.rst:52
msgid ""
"One must specify valid *buffer*, *width*, *height*, *format* and "
"optionally *stride*.  Invalid *buffer* size or dimensions may lead to "
"unexpected errors."
msgstr ""

#: ../../library/framebuf.rst:57
msgid "Drawing primitive shapes"
msgstr ""

#: ../../library/framebuf.rst:59
msgid "The following methods draw shapes onto the FrameBuffer."
msgstr ""

#: ../../library/framebuf.rst:63
msgid "Fill the entire FrameBuffer with the specified color."
msgstr ""

#: ../../library/framebuf.rst:67
msgid ""
"If *c* is not given, get the color value of the specified pixel. If *c* "
"is given, set the specified pixel to the given color."
msgstr ""

#: ../../library/framebuf.rst:74
msgid ""
"Draw a line from a set of coordinates using the given color and a "
"thickness of 1 pixel. The `line` method draws the line up to a second set"
" of coordinates whereas the `hline` and `vline` methods draw horizontal "
"and vertical lines respectively up to a given length."
msgstr ""

#: ../../library/framebuf.rst:83
msgid ""
"Draw a rectangle at the given location, size and color. The `rect` method"
" draws only a 1 pixel outline whereas the `fill_rect` method draws both "
"the outline and interior."
msgstr ""

#: ../../library/framebuf.rst:88
msgid "Drawing text"
msgstr ""

#: ../../library/framebuf.rst:92
msgid ""
"Write text to the FrameBuffer using the the coordinates as the upper-left"
" corner of the text. The color of the text can be defined by the optional"
" argument but is otherwise a default value of 1. All characters have "
"dimensions of 8x8 pixels and there is currently no way to change the "
"font."
msgstr ""

#: ../../library/framebuf.rst:99
msgid "Other methods"
msgstr ""

#: ../../library/framebuf.rst:103
msgid ""
"Shift the contents of the FrameBuffer by the given vector. This may leave"
" a footprint of the previous colors in the FrameBuffer."
msgstr ""

#: ../../library/framebuf.rst:108
msgid ""
"Draw another FrameBuffer on top of the current one at the given "
"coordinates. If *key* is specified then it should be a color integer and "
"the corresponding color will be considered transparent: all pixels with "
"that color value will not be drawn."
msgstr ""

#: ../../library/framebuf.rst:113
msgid ""
"The *palette* argument enables blitting between FrameBuffers with "
"differing formats. Typical usage is to render a monochrome or grayscale "
"glyph/icon to a color display. The *palette* is a FrameBuffer instance "
"whose format is that of the current FrameBuffer. The *palette* height is "
"one pixel and its pixel width is the number of colors in the source "
"FrameBuffer. The *palette* for an N-bit source needs 2**N pixels; the "
"*palette* for a monochrome source would have 2 pixels representing "
"background and foreground colors. The application assigns a color to each"
" pixel in the *palette*. The color of the current pixel will be that of "
"that *palette* pixel whose x position is the color of the corresponding "
"source pixel."
msgstr ""

#: ../../library/framebuf.rst:125
msgid "Constants"
msgstr ""

#: ../../library/framebuf.rst:129
msgid ""
"Monochrome (1-bit) color format This defines a mapping where the bits in "
"a byte are vertically mapped with bit 0 being nearest the top of the "
"screen. Consequently each byte occupies 8 vertical pixels. Subsequent "
"bytes appear at successive horizontal locations until the rightmost edge "
"is reached. Further bytes are rendered at locations starting at the "
"leftmost edge, 8 pixels lower."
msgstr ""

#: ../../library/framebuf.rst:138
msgid ""
"Monochrome (1-bit) color format This defines a mapping where the bits in "
"a byte are horizontally mapped. Each byte occupies 8 horizontal pixels "
"with bit 7 being the leftmost. Subsequent bytes appear at successive "
"horizontal locations until the rightmost edge is reached. Further bytes "
"are rendered on the next row, one pixel lower."
msgstr ""

#: ../../library/framebuf.rst:147
msgid ""
"Monochrome (1-bit) color format This defines a mapping where the bits in "
"a byte are horizontally mapped. Each byte occupies 8 horizontal pixels "
"with bit 0 being the leftmost. Subsequent bytes appear at successive "
"horizontal locations until the rightmost edge is reached. Further bytes "
"are rendered on the next row, one pixel lower."
msgstr ""

#: ../../library/framebuf.rst:156
msgid "Red Green Blue (16-bit, 5+6+5) color format"
msgstr ""

#: ../../library/framebuf.rst:160
msgid "Grayscale (2-bit) color format"
msgstr ""

#: ../../library/framebuf.rst:164
msgid "Grayscale (4-bit) color format"
msgstr ""

#: ../../library/framebuf.rst:168
msgid "Grayscale (8-bit) color format"
msgstr ""

