# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/pyb.USB_VCP.rst:5
msgid "class USB_VCP -- USB virtual comm port"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:7
msgid ""
"The USB_VCP class allows creation of a `stream`-like object representing "
"the USB virtual comm port.  It can be used to read and write data over "
"USB to the connected host."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:13
msgid "Constructors"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:17
msgid ""
"Create a new USB_VCP object.  The *id* argument specifies which USB VCP "
"port to use."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:22
msgid "Methods"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:26
msgid ""
"Configure the USB VCP port.  If the *flow* argument is not -1 then the "
"value sets the flow control, which can be a bitwise-or of ``USB_VCP.RTS``"
" and ``USB_VCP.CTS``. RTS is used to control read behaviour and CTS, to "
"control write behaviour."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:32
msgid ""
"Set the character which interrupts running Python code.  This is set to 3"
" (CTRL-C) by default, and when a CTRL-C character is received over the "
"USB VCP port, a KeyboardInterrupt exception is raised."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:36
msgid ""
"Set to -1 to disable this interrupt feature.  This is useful when you "
"want to send raw bytes over the USB VCP port."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:41
msgid "Return ``True`` if USB is connected as a serial device, else ``False``."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:45
msgid "Return ``True`` if any characters waiting, else ``False``."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:49
msgid ""
"This method does nothing.  It exists so the USB_VCP object can act as a "
"file."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:54
msgid ""
"Read at most ``nbytes`` from the serial device and return them as a bytes"
" object.  If ``nbytes`` is not specified then the method reads all "
"available bytes from the serial device. USB_VCP `stream` implicitly works"
" in non-blocking mode, so if no pending data available, this method will "
"return immediately with ``None`` value."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:63
msgid ""
"Read bytes from the serial device and store them into ``buf``, which "
"should be a buffer-like object.  At most ``len(buf)`` bytes are read. If "
"``maxlen`` is given and then at most ``min(maxlen, len(buf))`` bytes are "
"read."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:68
msgid ""
"Returns the number of bytes read and stored into ``buf`` or ``None`` if "
"no pending data available."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:73
msgid "Read a whole line from the serial device."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:75
msgid ""
"Returns a bytes object containing the data, including the trailing "
"newline character or ``None`` if no pending data available."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:80
msgid ""
"Read as much data as possible from the serial device, breaking it into "
"lines."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:83
msgid ""
"Returns a list of bytes objects, each object being one of the lines. Each"
" line will include the newline character."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:88
msgid "Write the bytes from ``buf`` to the serial device."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:90
msgid "Returns the number of bytes written."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:94
msgid "Receive data on the bus:"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:96
msgid ""
"``data`` can be an integer, which is the number of bytes to receive, or a"
" mutable buffer, which will be filled with received bytes."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:98
msgid "``timeout`` is the timeout in milliseconds to wait for the receive."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:100
msgid ""
"Return value: if ``data`` is an integer then a new buffer of the bytes "
"received, otherwise the number of bytes read into ``data`` is returned."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:105
msgid "Send data over the USB VCP:"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:107
msgid "``data`` is the data to send (an integer to send, or a buffer object)."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:108
msgid "``timeout`` is the timeout in milliseconds to wait for the send."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:110
msgid "Return value: number of bytes sent."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:114
msgid ""
"Register *handler* to be called whenever an event specified by *trigger* "
"occurs.  The *handler* function must take exactly one argument, which "
"will be the USB VCP object.  Pass in ``None`` to disable the callback."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:118
msgid "Valid values for *trigger* are:"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:120
msgid ""
"``USB_VCP.IRQ_RX``: new data is available for reading from the USB VCP "
"object."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:124
msgid "Constants"
msgstr ""

#: ../../library/pyb.USB_VCP.rst:129
msgid "to select the flow control type."
msgstr ""

#: ../../library/pyb.USB_VCP.rst:133
msgid "IRQ trigger values for :meth:`USB_VCP.irq`."
msgstr ""

