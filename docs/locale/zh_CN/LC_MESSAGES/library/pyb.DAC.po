# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright © 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/pyb.DAC.rst:5
msgid "class DAC -- digital to analog conversion"
msgstr ""

#: ../../library/pyb.DAC.rst:7
msgid ""
"The DAC is used to output analog values (a specific voltage) on pin X5 or"
" pin X6. The voltage will be between 0 and 3.3V."
msgstr ""

#: ../../library/pyb.DAC.rst:10
msgid "*This module will undergo changes to the API.*"
msgstr ""

#: ../../library/pyb.DAC.rst:12
msgid "Example usage::"
msgstr ""

#: ../../library/pyb.DAC.rst:22
msgid "To output a continuous sine-wave::"
msgstr ""

#: ../../library/pyb.DAC.rst:36
msgid "To output a continuous sine-wave at 12-bit resolution::"
msgstr ""

#: ../../library/pyb.DAC.rst:50
msgid "Constructors"
msgstr ""

#: ../../library/pyb.DAC.rst:54
msgid "Construct a new DAC object."
msgstr ""

#: ../../library/pyb.DAC.rst:56
msgid ""
"``port`` can be a pin object, or an integer (1 or 2). DAC(1) is on pin X5"
" and DAC(2) is on pin X6."
msgstr ""

#: ../../library/pyb.DAC.rst:59
msgid ""
"``bits`` is an integer specifying the resolution, and can be 8 or 12. The"
" maximum value for the write and write_timed methods will be "
"2\\*\\*``bits``-1."
msgstr ""

#: ../../library/pyb.DAC.rst:63
msgid ""
"The *buffering* parameter selects the behaviour of the DAC op-amp output "
"buffer, whose purpose is to reduce the output impedance.  It can be "
"``None`` to select the default (buffering enabled for :meth:`DAC.noise`, "
":meth:`DAC.triangle` and :meth:`DAC.write_timed`, and disabled for "
":meth:`DAC.write`), ``False`` to disable buffering completely, or "
"``True`` to enable output buffering."
msgstr ""

#: ../../library/pyb.DAC.rst:70
msgid ""
"When buffering is enabled the DAC pin can drive loads down to 5KΩ. "
"Otherwise it has an output impedance of 15KΩ maximum: consequently to "
"achieve a 1% accuracy without buffering requires the applied load to be "
"less than 1.5MΩ.  Using the buffer incurs a penalty in accuracy, "
"especially near the extremes of range."
msgstr ""

#: ../../library/pyb.DAC.rst:77
msgid "Methods"
msgstr ""

#: ../../library/pyb.DAC.rst:81
msgid ""
"Reinitialise the DAC.  *bits* can be 8 or 12.  *buffering* can be "
"``None``, ``False`` or ``True``; see above constructor for the meaning of"
" this parameter."
msgstr ""

#: ../../library/pyb.DAC.rst:87
msgid "De-initialise the DAC making its pin available for other uses."
msgstr ""

#: ../../library/pyb.DAC.rst:91
msgid ""
"Generate a pseudo-random noise signal.  A new random sample is written to"
" the DAC output at the given frequency."
msgstr ""

#: ../../library/pyb.DAC.rst:96
msgid ""
"Generate a triangle wave.  The value on the DAC output changes at the "
"given frequency and ramps through the full 12-bit range (up and down). "
"Therefore the frequency of the repeating triangle wave itself is 8192 "
"times smaller."
msgstr ""

#: ../../library/pyb.DAC.rst:102
msgid ""
"Direct access to the DAC output.  The minimum value is 0.  The maximum "
"value is 2\\*\\*``bits``-1, where ``bits`` is set when creating the DAC "
"object or by using the ``init`` method."
msgstr ""

#: ../../library/pyb.DAC.rst:108
msgid ""
"Initiates a burst of RAM to DAC using a DMA transfer. The input data is "
"treated as an array of bytes in 8-bit mode, and an array of unsigned "
"half-words (array typecode 'H') in 12-bit mode."
msgstr ""

#: ../../library/pyb.DAC.rst:112
msgid ""
"``freq`` can be an integer specifying the frequency to write the DAC "
"samples at, using Timer(6).  Or it can be an already-initialised Timer "
"object which is used to trigger the DAC sample.  Valid timers are 2, 4, "
"5, 6, 7 and 8."
msgstr ""

#: ../../library/pyb.DAC.rst:117
msgid "``mode`` can be ``DAC.NORMAL`` or ``DAC.CIRCULAR``."
msgstr ""

#: ../../library/pyb.DAC.rst:119
msgid "Example using both DACs at the same time::"
msgstr ""

