# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright © 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/ssl.rst:2
msgid ":mod:`ssl` -- SSL/TLS module"
msgstr ""

#: ../../library/ssl.rst:7
msgid "|see_cpython_module| :mod:`python:ssl`."
msgstr ""

#: ../../library/ssl.rst:9
msgid ""
"This module provides access to Transport Layer Security (previously and "
"widely known as “Secure Sockets Layer”) encryption and peer "
"authentication facilities for network sockets, both client-side and "
"server-side."
msgstr ""

#: ../../library/ssl.rst:14
msgid "Functions"
msgstr ""

#: ../../library/ssl.rst:18
msgid ""
"Takes a `stream` *sock* (usually socket.socket instance of "
"``SOCK_STREAM`` type), and returns an instance of ssl.SSLSocket, which "
"wraps the underlying stream in an SSL context. Returned object has the "
"usual `stream` interface methods like ``read()``, ``write()``, etc. A "
"server-side SSL socket should be created from a normal socket returned "
"from :meth:`~socket.socket.accept()` on a non-SSL listening server "
"socket."
msgstr ""

#: ../../library/ssl.rst:25
msgid ""
"*do_handshake* determines whether the handshake is done as part of the "
"``wrap_socket`` or whether it is deferred to be done as part of the "
"initial reads or writes (there is no ``do_handshake`` method as in "
"CPython). For blocking sockets doing the handshake immediately is "
"standard. For non-blocking sockets (i.e. when the *sock* passed into "
"``wrap_socket`` is in non-blocking mode) the handshake should generally "
"be deferred because otherwise ``wrap_socket`` blocks until it completes. "
"Note that in AXTLS the handshake can be deferred until the first read or "
"write but it then blocks until completion."
msgstr ""

#: ../../library/ssl.rst:34
msgid ""
"Depending on the underlying module implementation in a particular "
":term:`MicroPython port`, some or all keyword arguments above may be not "
"supported."
msgstr ""

#: ../../library/ssl.rst:39
msgid ""
"Some implementations of ``ssl`` module do NOT validate server "
"certificates, which makes an SSL connection established prone to man-in-"
"the-middle attacks."
msgstr ""

#: ../../library/ssl.rst:42
msgid ""
"CPython's ``wrap_socket`` returns an ``SSLSocket`` object which has "
"methods typical for sockets, such as ``send``, ``recv``, etc. "
"MicroPython's ``wrap_socket`` returns an object more similar to CPython's"
" ``SSLObject`` which does not have these socket methods."
msgstr ""

#: ../../library/ssl.rst:48
msgid "Exceptions"
msgstr ""

#: ../../library/ssl.rst:52
msgid "This exception does NOT exist. Instead its base class, OSError, is used."
msgstr ""

#: ../../library/ssl.rst:55
msgid "Constants"
msgstr ""

#: ../../library/ssl.rst:61
msgid "Supported values for *cert_reqs* parameter."
msgstr ""

