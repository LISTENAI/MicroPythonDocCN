# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright © 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/zephyr.FlashArea.rst:5
msgid "class FlashArea -- access to built-in flash storage"
msgstr "FlashArea 类 -- 访问内置的 flash 存储"

#: ../../library/zephyr.FlashArea.rst:7
msgid ""
"Uses `Zephyr flash map API "
"<https://docs.zephyrproject.org/latest/reference/storage/flash_map/flash_map.html"
"#flash-map>`_."
msgstr ""
"使用 `Zephyr flash map API "
"<https://docs.zephyrproject.org/latest/reference/storage/flash_map/flash_map.html"
"#flash-map>`_."

#: ../../library/zephyr.FlashArea.rst:9
msgid ""
"This class allows access to device flash partition data. Flash area "
"structs consist of a globally unique ID number, the name of the flash "
"device the partition is in, the start offset (expressed in relation to "
"the flash memory beginning address per partition), and the size of the "
"partition that the device represents. For fixed flash partitions, data "
"from the device tree is used; however, fixed flash partitioning is not "
"enforced in MicroPython because MCUBoot is not enabled."
msgstr ""
"此类允许访问设备 flash 分区数据。"
"Flash 区实体由一个全局唯一的 ID 号、"
"分区所在的 Flash 设备的名称、"
"起始偏移量（表示为与每个分区的 Flash 存储器起始地址相关）、"
"以及该设备所代表的分区的大小组成。"
"对于固定的 flash 分区，来自设备树定义的数据将被使用；"
"但由于未启用 MCUBoot，在 MicroPython 中未强制执行固定 flash 分区。"

#: ../../library/zephyr.FlashArea.rst:16
msgid "Constructors"
msgstr "构造器"

#: ../../library/zephyr.FlashArea.rst:20
msgid ""
"Gets an object for accessing flash memory at partition specified by "
"``id`` and with block size of ``block_size``."
msgstr ""
"通过指定 ``id`` 和块大小 ``block_size`` 获取一个对象，用于访问 flash 分区中的闪存。"

#: ../../library/zephyr.FlashArea.rst:22
msgid ""
"``id`` values are integers correlating to fixed flash partitions defined "
"in the devicetree. A commonly used partition is the designated flash "
"storage area defined as ``FlashArea.STORAGE`` if "
"``FLASH_AREA_LABEL_EXISTS(storage)`` returns true at boot. Zephyr "
"devicetree fixed flash partitions are ``boot_partition``, "
"``slot0_partition``, ``slot1_partition``, and ``scratch_partition``. "
"Because MCUBoot is not enabled by default for MicroPython, these fixed "
"partitions can be accessed by ID integer values 1, 2, 3, and 4, "
"respectively."
msgstr ""
"``id`` 值是与设备树中定义的固定 flash 分区相关的整数。"
"一个公用的 flash 存储区域，是在启动时，当 ``FLASH_AREA_LABEL_EXISTS(storage)`` 返回 true 后，"
"定义为 ``FlashArea.STORAGE`` 。"
"Zephyr devicetree 中的固定闪存分区为 ``boot_partition`` 、 ``slot0_partition`` 、 "
"``slot1_partition`` 和 ``scratch_partition`` 。"
"由于 MicroPython 默认未启用 MCUBoot，因此可以分别通过 ID 整数值 1、2、3 和 4 访问这些固定分区。"

#: ../../library/zephyr.FlashArea.rst:30
msgid "Methods"
msgstr "函数"

#: ../../library/zephyr.FlashArea.rst:38
msgid ""
"These methods implement the simple and extended :ref:`block protocol "
"<block-device-interface>` defined by :class:`uos.AbstractBlockDev`."
msgstr ""
"这些函数实现了简单和扩展的 :ref:`块协议 <block-device-interface>` （在 :class:`uos.AbstractBlockDev` 中定义） 。"
