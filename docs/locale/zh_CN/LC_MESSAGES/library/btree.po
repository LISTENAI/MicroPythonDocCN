# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/btree.rst:2
msgid ":mod:`btree` -- simple BTree database"
msgstr ""

#: ../../library/btree.rst:7
msgid ""
"The ``btree`` module implements a simple key-value database using "
"external storage (disk files, or in general case, a random-access "
"`stream`). Keys are stored sorted in the database, and besides efficient "
"retrieval by a key value, a database also supports efficient ordered "
"range scans (retrieval of values with the keys in a given range). On the "
"application interface side, BTree database work as close a possible to a "
"way standard `dict` type works, one notable difference is that both keys "
"and values must be `bytes` objects (so, if you want to store objects of "
"other types, you need to serialize them to `bytes` first)."
msgstr ""

#: ../../library/btree.rst:17
msgid "The module is based on the well-known BerkelyDB library, version 1.xx."
msgstr ""

#: ../../library/btree.rst:19
msgid "Example::"
msgstr ""

#: ../../library/btree.rst:77
msgid "Functions"
msgstr ""

#: ../../library/btree.rst:81
msgid ""
"Open a database from a random-access `stream` (like an open file). All "
"other parameters are optional and keyword-only, and allow to tweak "
"advanced parameters of the database operation (most users will not need "
"them):"
msgstr ""

#: ../../library/btree.rst:85
msgid "*flags* - Currently unused."
msgstr ""

#: ../../library/btree.rst:86
msgid ""
"*pagesize* - Page size used for the nodes in BTree. Acceptable range is "
"512-65536. If 0, a port-specific default will be used, optimized for "
"port's memory usage and/or performance."
msgstr ""

#: ../../library/btree.rst:89
msgid ""
"*cachesize* - Suggested memory cache size in bytes. For a board with "
"enough memory using larger values may improve performance. Cache policy "
"is as follows: entire cache is not allocated at once; instead, accessing "
"a new page in database will allocate a memory buffer for it, until value "
"specified by *cachesize* is reached. Then, these buffers will be managed "
"using LRU (least recently used) policy. More buffers may still be "
"allocated if needed (e.g., if a database contains big keys and/or "
"values). Allocated cache buffers aren't reclaimed."
msgstr ""

#: ../../library/btree.rst:97
msgid ""
"*minkeypage* - Minimum number of keys to store per page. Default value of"
" 0 equivalent to 2."
msgstr ""

#: ../../library/btree.rst:100
msgid ""
"Returns a BTree object, which implements a dictionary protocol (set of "
"methods), and some additional methods described below."
msgstr ""

#: ../../library/btree.rst:104
msgid "Methods"
msgstr ""

#: ../../library/btree.rst:108
msgid ""
"Close the database. It's mandatory to close the database at the end of "
"processing, as some unwritten data may be still in the cache. Note that "
"this does not close underlying stream with which the database was opened,"
" it should be closed separately (which is also mandatory to make sure "
"that data flushed from buffer to the underlying storage)."
msgstr ""

#: ../../library/btree.rst:116
msgid "Flush any data in cache to the underlying stream."
msgstr ""

#: ../../library/btree.rst:124
msgid "Standard dictionary methods."
msgstr ""

#: ../../library/btree.rst:128
msgid ""
"A BTree object can be iterated over directly (similar to a dictionary) to"
" get access to all keys in order."
msgstr ""

#: ../../library/btree.rst:135
msgid ""
"These methods are similar to standard dictionary methods, but also can "
"take optional parameters to iterate over a key sub-range, instead of the "
"entire database. Note that for all 3 methods, *start_key* and *end_key* "
"arguments represent key values. For example, `values()` method will "
"iterate over values corresponding to they key range given. None values "
"for *start_key* means \"from the first key\", no *end_key* or its value "
"of None means \"until the end of database\". By default, range is "
"inclusive of *start_key* and exclusive of *end_key*, you can include "
"*end_key* in iteration by passing *flags* of `btree.INCL`. You can "
"iterate in descending key direction by passing *flags* of `btree.DESC`. "
"The flags values can be ORed together."
msgstr ""

#: ../../library/btree.rst:149
msgid "Constants"
msgstr ""

#: ../../library/btree.rst:153
msgid ""
"A flag for `keys()`, `values()`, `items()` methods to specify that "
"scanning should be inclusive of the end key."
msgstr ""

#: ../../library/btree.rst:158
msgid ""
"A flag for `keys()`, `values()`, `items()` methods to specify that "
"scanning should be in descending direction of keys."
msgstr ""

