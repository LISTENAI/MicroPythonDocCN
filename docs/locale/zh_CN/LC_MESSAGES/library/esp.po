# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/esp.rst:2
msgid ":mod:`esp` --- functions related to the ESP8266 and ESP32"
msgstr ""

#: ../../library/esp.rst:7
msgid ""
"The ``esp`` module contains specific functions related to both the "
"ESP8266 and ESP32 modules.  Some functions are only available on one or "
"the other of these ports."
msgstr ""

#: ../../library/esp.rst:13
msgid "Functions"
msgstr ""

#: ../../library/esp.rst:17 ../../library/esp.rst:47 ../../library/esp.rst:67
msgid "**Note**: ESP8266 only"
msgstr ""

#: ../../library/esp.rst:19
msgid "Get or set the sleep type."
msgstr ""

#: ../../library/esp.rst:21
msgid ""
"If the *sleep_type* parameter is provided, sets the sleep type to its "
"value. If the function is called without parameters, returns the current "
"sleep type."
msgstr ""

#: ../../library/esp.rst:25
msgid "The possible sleep types are defined as constants:"
msgstr ""

#: ../../library/esp.rst:27
msgid "``SLEEP_NONE`` -- all functions enabled,"
msgstr ""

#: ../../library/esp.rst:28
msgid "``SLEEP_MODEM`` -- modem sleep, shuts down the WiFi Modem circuit."
msgstr ""

#: ../../library/esp.rst:29
msgid ""
"``SLEEP_LIGHT`` -- light sleep, shuts down the WiFi Modem circuit and "
"suspends the processor periodically."
msgstr ""

#: ../../library/esp.rst:32
msgid "The system enters the set sleep mode automatically when possible."
msgstr ""

#: ../../library/esp.rst:36
msgid "**Note**: ESP8266 only - use `machine.deepsleep()` on ESP32"
msgstr ""

#: ../../library/esp.rst:38
msgid "Enter deep sleep."
msgstr ""

#: ../../library/esp.rst:40
msgid ""
"The whole module powers down, except for the RTC clock circuit, which can"
" be used to restart the module after the specified time if the pin 16 is "
"connected to the reset pin. Otherwise the module will sleep until "
"manually reset."
msgstr ""

#: ../../library/esp.rst:49
msgid "Read the device ID of the flash memory."
msgstr ""

#: ../../library/esp.rst:53
msgid "Read the total size of the flash memory."
msgstr ""

#: ../../library/esp.rst:57
msgid "Read the memory offset at which the user flash space begins."
msgstr ""

#: ../../library/esp.rst:69
msgid ""
"Set the location that native code will be placed for execution after it "
"is compiled.  Native code is emitted when the ``@micropython.native``, "
"``@micropython.viper`` and ``@micropython.asm_xtensa`` decorators are "
"applied to a function.  The ESP8266 must execute code from either iRAM or"
" the lower 1MByte of flash (which is memory mapped), and this function "
"controls the location."
msgstr ""

#: ../../library/esp.rst:76
msgid ""
"If *start* and *length* are both ``None`` then the native code location "
"is set to the unused portion of memory at the end of the iRAM1 region.  "
"The size of this unused portion depends on the firmware and is typically "
"quite small (around 500 bytes), and is enough to store a few very small "
"functions.  The advantage of using this iRAM1 region is that it does not "
"get worn out by writing to it."
msgstr ""

#: ../../library/esp.rst:83
msgid ""
"If neither *start* nor *length* are ``None`` then they should be "
"integers. *start* should specify the byte offset from the beginning of "
"the flash at which native code should be stored.  *length* specifies how "
"many bytes of flash from *start* can be used to store native code.  "
"*start* and *length* should be multiples of the sector size (being 4096 "
"bytes).  The flash will be automatically erased before writing to it so "
"be sure to use a region of flash that is not otherwise used, for example "
"by the firmware or the filesystem."
msgstr ""

#: ../../library/esp.rst:92
msgid ""
"When using the flash to store native code *start+length* must be less "
"than or equal to 1MByte.  Note that the flash can be worn out if repeated"
" erasures (and writes) are made so use this feature sparingly. In "
"particular, native code needs to be recompiled and rewritten to flash on "
"each boot (including wake from deepsleep)."
msgstr ""

#: ../../library/esp.rst:98
msgid ""
"In both cases above, using iRAM1 or flash, if there is no more room left "
"in the specified region then the use of a native decorator on a function "
"will lead to `MemoryError` exception being raised during compilation of "
"that function."
msgstr ""

