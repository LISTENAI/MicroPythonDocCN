# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/pyb.RTC.rst:5
msgid "class RTC -- real time clock"
msgstr ""

#: ../../library/pyb.RTC.rst:7
msgid "The RTC is an independent clock that keeps track of the date and time."
msgstr ""

#: ../../library/pyb.RTC.rst:10
msgid "Example usage::"
msgstr ""

#: ../../library/pyb.RTC.rst:18
msgid "Constructors"
msgstr ""

#: ../../library/pyb.RTC.rst:22
msgid "Create an RTC object."
msgstr ""

#: ../../library/pyb.RTC.rst:26
msgid "Methods"
msgstr ""

#: ../../library/pyb.RTC.rst:30
msgid "Get or set the date and time of the RTC."
msgstr ""

#: ../../library/pyb.RTC.rst:32
msgid ""
"With no arguments, this method returns an 8-tuple with the current date "
"and time.  With 1 argument (being an 8-tuple) it sets the date and time "
"(and ``subseconds`` is reset to 255)."
msgstr ""

#: ../../library/pyb.RTC.rst:36
msgid "The 8-tuple has the following format:"
msgstr ""

#: ../../library/pyb.RTC.rst:38
msgid "(year, month, day, weekday, hours, minutes, seconds, subseconds)"
msgstr ""

#: ../../library/pyb.RTC.rst:40
msgid "``weekday`` is 1-7 for Monday through Sunday."
msgstr ""

#: ../../library/pyb.RTC.rst:42
msgid "``subseconds`` counts down from 255 to 0"
msgstr ""

#: ../../library/pyb.RTC.rst:46
msgid ""
"Set the RTC wakeup timer to trigger repeatedly at every ``timeout`` "
"milliseconds.  This trigger can wake the pyboard from both the sleep "
"states: :meth:`pyb.stop` and :meth:`pyb.standby`."
msgstr ""

#: ../../library/pyb.RTC.rst:50
msgid "If ``timeout`` is ``None`` then the wakeup timer is disabled."
msgstr ""

#: ../../library/pyb.RTC.rst:52
msgid ""
"If ``callback`` is given then it is executed at every trigger of the "
"wakeup timer.  ``callback`` must take exactly one argument."
msgstr ""

#: ../../library/pyb.RTC.rst:57
msgid "Get information about the startup time and reset source."
msgstr ""

#: ../../library/pyb.RTC.rst:59
msgid "The lower 0xffff are the number of milliseconds the RTC took to start up."
msgstr ""

#: ../../library/pyb.RTC.rst:61
msgid "Bit 0x10000 is set if a power-on reset occurred."
msgstr ""

#: ../../library/pyb.RTC.rst:62
msgid "Bit 0x20000 is set if an external reset occurred"
msgstr ""

#: ../../library/pyb.RTC.rst:66
msgid "Get or set RTC calibration."
msgstr ""

#: ../../library/pyb.RTC.rst:68
msgid ""
"With no arguments, ``calibration()`` returns the current calibration "
"value, which is an integer in the range [-511 : 512].  With one argument "
"it sets the RTC calibration."
msgstr ""

#: ../../library/pyb.RTC.rst:72
msgid ""
"The RTC Smooth Calibration mechanism adjusts the RTC clock rate by adding"
" or subtracting the given number of ticks from the 32768 Hz clock over a "
"32 second period (corresponding to 2^20 clock ticks.) Each tick added "
"will speed up the clock by 1 part in 2^20, or 0.954 ppm; likewise the RTC"
" clock it slowed by negative values. The usable calibration range is: "
"(-511 * 0.954) ~= -487.5 ppm up to (512 * 0.954) ~= 488.5 ppm"
msgstr ""

