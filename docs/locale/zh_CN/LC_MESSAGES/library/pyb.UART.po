# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/pyb.UART.rst:5
msgid "class UART -- duplex serial communication bus"
msgstr ""

#: ../../library/pyb.UART.rst:7
msgid ""
"UART implements the standard UART/USART duplex serial communications "
"protocol.  At the physical level it consists of 2 lines: RX and TX.  The "
"unit of communication is a character (not to be confused with a string "
"character) which can be 8 or 9 bits wide."
msgstr ""

#: ../../library/pyb.UART.rst:12
msgid "UART objects can be created and initialised using::"
msgstr ""

#: ../../library/pyb.UART.rst:19
msgid ""
"Bits can be 7, 8 or 9.  Parity can be None, 0 (even) or 1 (odd).  Stop "
"can be 1 or 2."
msgstr ""

#: ../../library/pyb.UART.rst:21 ../../library/pyb.UART.rst:108
msgid ""
"*Note:* with parity=None, only 8 and 9 bits are supported.  With parity "
"enabled, only 7 and 8 bits are supported."
msgstr ""

#: ../../library/pyb.UART.rst:24
msgid ""
"A UART object acts like a `stream` object and reading and writing is done"
" using the standard stream methods::"
msgstr ""

#: ../../library/pyb.UART.rst:33
msgid "Individual characters can be read/written using::"
msgstr ""

#: ../../library/pyb.UART.rst:38
msgid "To check if there is anything to be read, use::"
msgstr ""

#: ../../library/pyb.UART.rst:43
msgid ""
"*Note:* The stream functions ``read``, ``write``, etc. are new in "
"MicroPython v1.3.4. Earlier versions use ``uart.send`` and ``uart.recv``."
msgstr ""

#: ../../library/pyb.UART.rst:47
msgid "Constructors"
msgstr ""

#: ../../library/pyb.UART.rst:51
msgid ""
"Construct a UART object on the given bus. For Pyboard ``bus`` can be 1-4,"
" 6, 'XA', 'XB', 'YA', or 'YB'. For Pyboard Lite ``bus`` can be 1, 2, 6, "
"'XB', or 'YA'. For Pyboard D ``bus`` can be 1-4, 'XA', 'YA' or 'YB'. With"
" no additional parameters, the UART object is created but not initialised"
" (it has the settings from the last initialisation of the bus, if any).  "
"If extra arguments are given, the bus is initialised. See ``init`` for "
"parameters of initialisation."
msgstr ""

#: ../../library/pyb.UART.rst:60
msgid "The physical pins of the UART buses on Pyboard are:"
msgstr ""

#: ../../library/pyb.UART.rst:62 ../../library/pyb.UART.rst:76
msgid "``UART(4)`` is on ``XA``: ``(TX, RX) = (X1, X2) = (PA0, PA1)``"
msgstr ""

#: ../../library/pyb.UART.rst:63 ../../library/pyb.UART.rst:70
msgid "``UART(1)`` is on ``XB``: ``(TX, RX) = (X9, X10) = (PB6, PB7)``"
msgstr ""

#: ../../library/pyb.UART.rst:64 ../../library/pyb.UART.rst:71
msgid "``UART(6)`` is on ``YA``: ``(TX, RX) = (Y1, Y2) = (PC6, PC7)``"
msgstr ""

#: ../../library/pyb.UART.rst:65 ../../library/pyb.UART.rst:78
msgid "``UART(3)`` is on ``YB``: ``(TX, RX) = (Y9, Y10) = (PB10, PB11)``"
msgstr ""

#: ../../library/pyb.UART.rst:66 ../../library/pyb.UART.rst:79
msgid "``UART(2)`` is on: ``(TX, RX) = (X3, X4) = (PA2, PA3)``"
msgstr ""

#: ../../library/pyb.UART.rst:68
msgid "The Pyboard Lite supports UART(1), UART(2) and UART(6) only, pins are:"
msgstr ""

#: ../../library/pyb.UART.rst:72
msgid "``UART(2)`` is on: ``(TX, RX) = (X1, X2) = (PA2, PA3)``"
msgstr ""

#: ../../library/pyb.UART.rst:74
msgid ""
"The Pyboard D supports UART(1), UART(2), UART(3) and UART(4) only, pins "
"are:"
msgstr ""

#: ../../library/pyb.UART.rst:77
msgid "``UART(1)`` is on ``YA``: ``(TX, RX) = (Y1, Y2) = (PA9, PA10)``"
msgstr ""

#: ../../library/pyb.UART.rst:81
msgid ""
"*Note:* Pyboard D has ``UART(1)`` on ``YA``, unlike Pyboard and Pyboard "
"Lite that both have ``UART(1)`` on ``XB`` and ``UART(6)`` on ``YA``."
msgstr ""

#: ../../library/pyb.UART.rst:85
msgid "Methods"
msgstr ""

#: ../../library/pyb.UART.rst:89
msgid "Initialise the UART bus with the given parameters:"
msgstr ""

#: ../../library/pyb.UART.rst:91
msgid "``baudrate`` is the clock rate."
msgstr ""

#: ../../library/pyb.UART.rst:92
msgid "``bits`` is the number of bits per character, 7, 8 or 9."
msgstr ""

#: ../../library/pyb.UART.rst:93
msgid "``parity`` is the parity, ``None``, 0 (even) or 1 (odd)."
msgstr ""

#: ../../library/pyb.UART.rst:94
msgid "``stop`` is the number of stop bits, 1 or 2."
msgstr ""

#: ../../library/pyb.UART.rst:95
msgid ""
"``flow`` sets the flow control type. Can be 0, ``UART.RTS``, ``UART.CTS``"
" or ``UART.RTS | UART.CTS``."
msgstr ""

#: ../../library/pyb.UART.rst:97
msgid ""
"``timeout`` is the timeout in milliseconds to wait for writing/reading "
"the first character."
msgstr ""

#: ../../library/pyb.UART.rst:98
msgid ""
"``timeout_char`` is the timeout in milliseconds to wait between "
"characters while writing or reading."
msgstr ""

#: ../../library/pyb.UART.rst:99
msgid ""
"``read_buf_len`` is the character length of the read buffer (0 to "
"disable)."
msgstr ""

#: ../../library/pyb.UART.rst:101
#, python-format
msgid ""
"This method will raise an exception if the baudrate could not be set "
"within 5% of the desired value.  The minimum baudrate is dictated by the "
"frequency of the bus that the UART is on; UART(1) and UART(6) are APB2, "
"the rest are on APB1.  The default bus frequencies give a minimum "
"baudrate of 1300 for UART(1) and UART(6) and 650 for the others.  Use "
":func:`pyb.freq <pyb.freq>` to reduce the bus frequencies to get lower "
"baudrates."
msgstr ""

#: ../../library/pyb.UART.rst:113
msgid "Turn off the UART bus."
msgstr ""

#: ../../library/pyb.UART.rst:117
msgid "Returns the number of bytes waiting (may be 0)."
msgstr ""

#: ../../library/pyb.UART.rst:121
msgid ""
"Read characters.  If ``nbytes`` is specified then read at most that many "
"bytes. If ``nbytes`` are available in the buffer, returns immediately, "
"otherwise returns when sufficient characters arrive or the timeout "
"elapses."
msgstr ""

#: ../../library/pyb.UART.rst:125
msgid ""
"If ``nbytes`` is not given then the method reads as much data as "
"possible.  It returns after the timeout has elapsed."
msgstr ""

#: ../../library/pyb.UART.rst:128
msgid ""
"*Note:* for 9 bit characters each character takes two bytes, ``nbytes`` "
"must be even, and the number of characters is ``nbytes/2``."
msgstr ""

#: ../../library/pyb.UART.rst:131
msgid ""
"Return value: a bytes object containing the bytes read in.  Returns "
"``None`` on timeout."
msgstr ""

#: ../../library/pyb.UART.rst:136
msgid "Receive a single character on the bus."
msgstr ""

#: ../../library/pyb.UART.rst:138
msgid "Return value: The character read, as an integer.  Returns -1 on timeout."
msgstr ""

#: ../../library/pyb.UART.rst:142
msgid ""
"Read bytes into the ``buf``.  If ``nbytes`` is specified then read at "
"most that many bytes.  Otherwise, read at most ``len(buf)`` bytes."
msgstr ""

#: ../../library/pyb.UART.rst:145
msgid ""
"Return value: number of bytes read and stored into ``buf`` or ``None`` on"
" timeout."
msgstr ""

#: ../../library/pyb.UART.rst:150
msgid ""
"Read a line, ending in a newline character. If such a line exists, return"
" is immediate. If the timeout elapses, all available data is returned "
"regardless of whether a newline exists."
msgstr ""

#: ../../library/pyb.UART.rst:154
msgid ""
"Return value: the line read or ``None`` on timeout if no data is "
"available."
msgstr ""

#: ../../library/pyb.UART.rst:158
msgid ""
"Write the buffer of bytes to the bus.  If characters are 7 or 8 bits wide"
" then each byte is one character.  If characters are 9 bits wide then two"
" bytes are used for each character (little endian), and ``buf`` must "
"contain an even number of bytes."
msgstr ""

#: ../../library/pyb.UART.rst:163
msgid ""
"Return value: number of bytes written. If a timeout occurs and no bytes "
"were written returns ``None``."
msgstr ""

#: ../../library/pyb.UART.rst:168
msgid ""
"Write a single character on the bus.  ``char`` is an integer to write. "
"Return value: ``None``. See note below if CTS flow control is used."
msgstr ""

#: ../../library/pyb.UART.rst:173
msgid ""
"Send a break condition on the bus.  This drives the bus low for a "
"duration of 13 bits. Return value: ``None``."
msgstr ""

#: ../../library/pyb.UART.rst:178
msgid "Constants"
msgstr ""

#: ../../library/pyb.UART.rst:183
msgid "to select the flow control type."
msgstr ""

#: ../../library/pyb.UART.rst:186
msgid "Flow Control"
msgstr ""

#: ../../library/pyb.UART.rst:188
msgid ""
"On Pyboards V1 and V1.1 ``UART(2)`` and ``UART(3)`` support RTS/CTS "
"hardware flow control using the following pins:"
msgstr ""

#: ../../library/pyb.UART.rst:191
msgid ""
"``UART(2)`` is on: ``(TX, RX, nRTS, nCTS) = (X3, X4, X2, X1) = (PA2, PA3,"
" PA1, PA0)``"
msgstr ""

#: ../../library/pyb.UART.rst:192
msgid ""
"``UART(3)`` is on :``(TX, RX, nRTS, nCTS) = (Y9, Y10, Y7, Y6) = (PB10, "
"PB11, PB14, PB13)``"
msgstr ""

#: ../../library/pyb.UART.rst:194
msgid "On the Pyboard Lite only ``UART(2)`` supports flow control on these pins:"
msgstr ""

#: ../../library/pyb.UART.rst:196
msgid "``(TX, RX, nRTS, nCTS) = (X1, X2, X4, X3) = (PA2, PA3, PA1, PA0)``"
msgstr ""

#: ../../library/pyb.UART.rst:198
msgid ""
"In the following paragraphs the term \"target\" refers to the device "
"connected to the UART."
msgstr ""

#: ../../library/pyb.UART.rst:201
msgid ""
"When the UART's ``init()`` method is called with ``flow`` set to one or "
"both of ``UART.RTS`` and ``UART.CTS`` the relevant flow control pins are "
"configured. ``nRTS`` is an active low output, ``nCTS`` is an active low "
"input with pullup enabled. To achieve flow control the Pyboard's ``nCTS``"
" signal should be connected to the target's ``nRTS`` and the Pyboard's "
"``nRTS`` to the target's ``nCTS``."
msgstr ""

#: ../../library/pyb.UART.rst:208
msgid "CTS: target controls Pyboard transmitter"
msgstr ""

#: ../../library/pyb.UART.rst:210
msgid "If CTS flow control is enabled the write behaviour is as follows:"
msgstr ""

#: ../../library/pyb.UART.rst:212
msgid ""
"If the Pyboard's ``UART.write(buf)`` method is called, transmission will "
"stall for any periods when ``nCTS`` is ``False``. This will result in a "
"timeout if the entire buffer was not transmitted in the timeout period. "
"The method returns the number of bytes written, enabling the user to "
"write the remainder of the data if required. In the event of a timeout, a"
" character will remain in the UART pending ``nCTS``. The number of bytes "
"composing this character will be included in the return value."
msgstr ""

#: ../../library/pyb.UART.rst:219
msgid ""
"If ``UART.writechar()`` is called when ``nCTS`` is ``False`` the method "
"will time out unless the target asserts ``nCTS`` in time. If it times out"
" ``OSError 116`` will be raised. The character will be transmitted as "
"soon as the target asserts ``nCTS``."
msgstr ""

#: ../../library/pyb.UART.rst:224
msgid "RTS: Pyboard controls target's transmitter"
msgstr ""

#: ../../library/pyb.UART.rst:226
msgid "If RTS flow control is enabled, behaviour is as follows:"
msgstr ""

#: ../../library/pyb.UART.rst:228
msgid ""
"If buffered input is used (``read_buf_len`` > 0), incoming characters are"
" buffered. If the buffer becomes full, the next character to arrive will "
"cause ``nRTS`` to go ``False``: the target should cease transmission. "
"``nRTS`` will go ``True`` when characters are read from the buffer."
msgstr ""

#: ../../library/pyb.UART.rst:233
msgid ""
"Note that the ``any()`` method returns the number of bytes in the buffer."
" Assume a buffer length of ``N`` bytes. If the buffer becomes full, and "
"another character arrives, ``nRTS`` will be set False, and ``any()`` will"
" return the count ``N``. When characters are read the additional "
"character will be placed in the buffer and will be included in the result"
" of a subsequent ``any()`` call."
msgstr ""

#: ../../library/pyb.UART.rst:239
msgid ""
"If buffered input is not used (``read_buf_len`` == 0) the arrival of a "
"character will cause ``nRTS`` to go ``False`` until the character is "
"read."
msgstr ""

