# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/rp2.StateMachine.rst:5
msgid "class StateMachine -- access to the RP2040's programmable I/O interface"
msgstr ""

#: ../../library/rp2.StateMachine.rst:7
msgid ""
"The :class:`StateMachine` class gives access to the RP2040's PIO "
"(programmable I/O) interface."
msgstr ""

#: ../../library/rp2.StateMachine.rst:10
msgid "For assembling PIO programs, see :func:`rp2.asm_pio`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:14
msgid "Constructors"
msgstr ""

#: ../../library/rp2.StateMachine.rst:18
msgid ""
"Get the state machine numbered *id*. The RP2040 has two identical PIO "
"instances, each with 4 state machines: so there are 8 state machines in "
"total, numbered 0 to 7."
msgstr ""

#: ../../library/rp2.StateMachine.rst:22
msgid ""
"Optionally initialize it with the given program *program*: see "
"`StateMachine.init`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:27
msgid "Methods"
msgstr ""

#: ../../library/rp2.StateMachine.rst:31
msgid "Configure the state machine instance to run the given *program*."
msgstr ""

#: ../../library/rp2.StateMachine.rst:33
msgid ""
"The program is added to the instruction memory of this PIO instance. If "
"the instruction memory already contains this program, then its offset is "
"re-used so as to save on instruction memory."
msgstr ""

#: ../../library/rp2.StateMachine.rst:37
msgid ""
"*freq* is the frequency in Hz to run the state machine at. Defaults to "
"the system clock frequency."
msgstr ""

#: ../../library/rp2.StateMachine.rst:40
msgid ""
"The clock divider is computed as ``system clock frequency / freq``, so "
"there can be slight rounding errors."
msgstr ""

#: ../../library/rp2.StateMachine.rst:43
msgid ""
"The minimum possible clock divider is one 65536th of the system clock: so"
" at the default system clock frequency of 125MHz, the minimum value of "
"*freq* is ``1908``. To run state machines at slower frequencies, you'll "
"need to reduce the system clock speed with `machine.freq()`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:47
msgid "*in_base* is the first pin to use for ``in()`` instructions."
msgstr ""

#: ../../library/rp2.StateMachine.rst:48
msgid "*out_base* is the first pin to use for ``out()`` instructions."
msgstr ""

#: ../../library/rp2.StateMachine.rst:49
msgid "*set_base* is the first pin to use for ``set()`` instructions."
msgstr ""

#: ../../library/rp2.StateMachine.rst:50
msgid "*jmp_pin* is the first pin to use for ``jmp(pin, ...)`` instructions."
msgstr ""

#: ../../library/rp2.StateMachine.rst:51
msgid "*sideset_base* is the first pin to use for side-setting."
msgstr ""

#: ../../library/rp2.StateMachine.rst:52
msgid ""
"*in_shiftdir* is the direction the ISR will shift, either "
"`PIO.SHIFT_LEFT` or `PIO.SHIFT_RIGHT`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:54
msgid ""
"*out_shiftdir* is the direction the OSR will shift, either "
"`PIO.SHIFT_LEFT` or `PIO.SHIFT_RIGHT`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:56
msgid ""
"*push_thresh* is the threshold in bits before auto-push or conditional "
"re-pushing is triggered."
msgstr ""

#: ../../library/rp2.StateMachine.rst:58
msgid ""
"*pull_thresh* is the threshold in bits before auto-push or conditional "
"re-pushing is triggered."
msgstr ""

#: ../../library/rp2.StateMachine.rst:63
msgid "Gets or sets whether the state machine is currently running."
msgstr ""

#: ../../library/rp2.StateMachine.rst:72
msgid "Restarts the state machine and jumps to the beginning of the program."
msgstr ""

#: ../../library/rp2.StateMachine.rst:74
msgid ""
"This method clears the state machine's internal state using the RP2040's "
"``SM_RESTART`` register. This includes:"
msgstr ""

#: ../../library/rp2.StateMachine.rst:77
msgid "input and output shift counters"
msgstr ""

#: ../../library/rp2.StateMachine.rst:78
msgid "the contents of the input shift register"
msgstr ""

#: ../../library/rp2.StateMachine.rst:79
msgid "the delay counter"
msgstr ""

#: ../../library/rp2.StateMachine.rst:80
msgid "the waiting-on-IRQ state"
msgstr ""

#: ../../library/rp2.StateMachine.rst:81
msgid "a stalled instruction run using `StateMachine.exec()`"
msgstr ""

#: ../../library/rp2.StateMachine.rst:85
msgid ""
"Execute a single PIO instruction. Uses `asm_pio_encode` to encode the "
"instruction from the given string *instr*."
msgstr ""

#: ../../library/rp2.StateMachine.rst:92
msgid "Pull a word from the state machine's RX FIFO."
msgstr ""

#: ../../library/rp2.StateMachine.rst:94
msgid ""
"If the FIFO is empty, it blocks until data arrives (i.e. the state "
"machine pushes a word)."
msgstr ""

#: ../../library/rp2.StateMachine.rst:97
msgid ""
"The value is shifted right by *shift* bits before returning, i.e. the "
"return value is ``word >> shift``."
msgstr ""

#: ../../library/rp2.StateMachine.rst:102
msgid "Push a word onto the state machine's TX FIFO."
msgstr ""

#: ../../library/rp2.StateMachine.rst:104
msgid ""
"If the FIFO is full, it blocks until there is space (i.e. the state "
"machine pulls a word)."
msgstr ""

#: ../../library/rp2.StateMachine.rst:107
msgid ""
"The value is first shifted left by *shift* bits, i.e. the state machine "
"receives ``value << shift``."
msgstr ""

#: ../../library/rp2.StateMachine.rst:112
msgid ""
"Returns the number of words in the state machine's RX FIFO. A value of 0 "
"indicates the FIFO is empty."
msgstr ""

#: ../../library/rp2.StateMachine.rst:115
msgid ""
"Useful for checking if data is waiting to be read, before calling "
"`StateMachine.get()`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:120
msgid ""
"Returns the number of words in the state machine's TX FIFO. A value of 0 "
"indicates the FIFO is empty."
msgstr ""

#: ../../library/rp2.StateMachine.rst:123
msgid ""
"Useful for checking if there is space to push another word using "
"`StateMachine.put()`."
msgstr ""

#: ../../library/rp2.StateMachine.rst:128
msgid "Returns the IRQ object for the given StateMachine."
msgstr ""

#: ../../library/rp2.StateMachine.rst:130
msgid "Optionally configure it."
msgstr ""

