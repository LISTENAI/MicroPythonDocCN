# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../library/machine.Pin.rst:5
msgid "class Pin -- control I/O pins"
msgstr ""

#: ../../library/machine.Pin.rst:7
msgid ""
"A pin object is used to control I/O pins (also known as GPIO - general-"
"purpose input/output).  Pin objects are commonly associated with a "
"physical pin that can drive an output voltage and read input voltages.  "
"The pin class has methods to set the mode of the pin (IN, OUT, etc) and "
"methods to get and set the digital logic level. For analog control of a "
"pin, see the :class:`ADC` class."
msgstr ""

#: ../../library/machine.Pin.rst:13
msgid ""
"A pin object is constructed by using an identifier which unambiguously "
"specifies a certain I/O pin.  The allowed forms of the identifier and the"
" physical pin that the identifier maps to are port-specific.  "
"Possibilities for the identifier are an integer, a string or a tuple with"
" port and pin number."
msgstr ""

#: ../../library/machine.Pin.rst:19
msgid "Usage Model::"
msgstr ""

#: ../../library/machine.Pin.rst:43
msgid "Constructors"
msgstr ""

#: ../../library/machine.Pin.rst:47
msgid ""
"Access the pin peripheral (GPIO pin) associated with the given ``id``.  "
"If additional arguments are given in the constructor then they are used "
"to initialise the pin.  Any settings that are not specified will remain "
"in their previous state."
msgstr ""

#: ../../library/machine.Pin.rst:51 ../../library/machine.Pin.rst:174
msgid "The arguments are:"
msgstr ""

#: ../../library/machine.Pin.rst:53
msgid ""
"``id`` is mandatory and can be an arbitrary object.  Among possible value"
" types are: int (an internal Pin identifier), str (a Pin name), and tuple"
" (pair of [port, pin])."
msgstr ""

#: ../../library/machine.Pin.rst:57
msgid "``mode`` specifies the pin mode, which can be one of:"
msgstr ""

#: ../../library/machine.Pin.rst:59
msgid ""
"``Pin.IN`` - Pin is configured for input.  If viewed as an output the pin"
" is in high-impedance state."
msgstr ""

#: ../../library/machine.Pin.rst:62
msgid "``Pin.OUT`` - Pin is configured for (normal) output."
msgstr ""

#: ../../library/machine.Pin.rst:64
msgid ""
"``Pin.OPEN_DRAIN`` - Pin is configured for open-drain output. Open-drain "
"output works in the following way: if the output value is set to 0 the "
"pin is active at a low level; if the output value is 1 the pin is in a "
"high-impedance state.  Not all ports implement this mode, or some might "
"only on certain pins."
msgstr ""

#: ../../library/machine.Pin.rst:69
msgid ""
"``Pin.ALT`` - Pin is configured to perform an alternative function, which"
" is port specific.  For a pin configured in such a way any other Pin "
"methods (except :meth:`Pin.init`) are not applicable (calling them will "
"lead to undefined, or a hardware-specific, result).  Not all ports "
"implement this mode."
msgstr ""

#: ../../library/machine.Pin.rst:74
msgid ""
"``Pin.ALT_OPEN_DRAIN`` - The Same as ``Pin.ALT``, but the pin is "
"configured as open-drain.  Not all ports implement this mode."
msgstr ""

#: ../../library/machine.Pin.rst:77
msgid ""
"``Pin.ANALOG`` - Pin is configured for analog input, see the :class:`ADC`"
" class."
msgstr ""

#: ../../library/machine.Pin.rst:79
msgid ""
"``pull`` specifies if the pin has a (weak) pull resistor attached, and "
"can be one of:"
msgstr ""

#: ../../library/machine.Pin.rst:82
msgid "``None`` - No pull up or down resistor."
msgstr ""

#: ../../library/machine.Pin.rst:83
msgid "``Pin.PULL_UP`` - Pull up resistor enabled."
msgstr ""

#: ../../library/machine.Pin.rst:84
msgid "``Pin.PULL_DOWN`` - Pull down resistor enabled."
msgstr ""

#: ../../library/machine.Pin.rst:86
msgid ""
"``value`` is valid only for Pin.OUT and Pin.OPEN_DRAIN modes and "
"specifies initial output pin value if given, otherwise the state of the "
"pin peripheral remains unchanged."
msgstr ""

#: ../../library/machine.Pin.rst:90
msgid ""
"``drive`` specifies the output power of the pin and can be one of: "
"``Pin.LOW_POWER``, ``Pin.MED_POWER`` or ``Pin.HIGH_POWER``.  The actual "
"current driving capabilities are port dependent.  Not all ports implement"
" this argument."
msgstr ""

#: ../../library/machine.Pin.rst:94
msgid ""
"``alt`` specifies an alternate function for the pin and the values it can"
" take are port dependent.  This argument is valid only for ``Pin.ALT`` "
"and ``Pin.ALT_OPEN_DRAIN`` modes.  It may be used when a pin supports "
"more than one alternate function.  If only one pin alternate function is "
"supported the this argument is not required.  Not all ports implement "
"this argument."
msgstr ""

#: ../../library/machine.Pin.rst:100
msgid ""
"As specified above, the Pin class allows to set an alternate function for"
" a particular pin, but it does not specify any further operations on such"
" a pin.  Pins configured in alternate-function mode are usually not used "
"as GPIO but are instead driven by other hardware peripherals.  The only "
"operation supported on such a pin is re-initialising, by calling the "
"constructor or :meth:`Pin.init` method.  If a pin that is configured in "
"alternate-function mode is re-initialised with ``Pin.IN``, ``Pin.OUT``, "
"or ``Pin.OPEN_DRAIN``, the alternate function will be removed from the "
"pin."
msgstr ""

#: ../../library/machine.Pin.rst:109
msgid "Methods"
msgstr ""

#: ../../library/machine.Pin.rst:113
msgid ""
"Re-initialise the pin using the given parameters.  Only those arguments "
"that are specified will be set.  The rest of the pin peripheral state "
"will remain unchanged.  See the constructor documentation for details of "
"the arguments."
msgstr ""

#: ../../library/machine.Pin.rst:117
msgid "Returns ``None``."
msgstr ""

#: ../../library/machine.Pin.rst:121
msgid ""
"This method allows to set and get the value of the pin, depending on "
"whether the argument ``x`` is supplied or not."
msgstr ""

#: ../../library/machine.Pin.rst:124
msgid ""
"If the argument is omitted then this method gets the digital logic level "
"of the pin, returning 0 or 1 corresponding to low and high voltage "
"signals respectively.  The behaviour of this method depends on the mode "
"of the pin:"
msgstr ""

#: ../../library/machine.Pin.rst:128
msgid ""
"``Pin.IN`` - The method returns the actual input value currently present "
"on the pin."
msgstr ""

#: ../../library/machine.Pin.rst:130
msgid "``Pin.OUT`` - The behaviour and return value of the method is undefined."
msgstr ""

#: ../../library/machine.Pin.rst:131
msgid ""
"``Pin.OPEN_DRAIN`` - If the pin is in state '0' then the behaviour and "
"return value of the method is undefined.  Otherwise, if the pin is in "
"state '1', the method returns the actual input value currently present on"
" the pin."
msgstr ""

#: ../../library/machine.Pin.rst:136
msgid ""
"If the argument is supplied then this method sets the digital logic level"
" of the pin.  The argument ``x`` can be anything that converts to a "
"boolean. If it converts to ``True``, the pin is set to state '1', "
"otherwise it is set to state '0'.  The behaviour of this method depends "
"on the mode of the pin:"
msgstr ""

#: ../../library/machine.Pin.rst:141
msgid ""
"``Pin.IN`` - The value is stored in the output buffer for the pin.  The "
"pin state does not change, it remains in the high-impedance state.  The "
"stored value will become active on the pin as soon as it is changed to "
"``Pin.OUT`` or ``Pin.OPEN_DRAIN`` mode."
msgstr ""

#: ../../library/machine.Pin.rst:145
msgid "``Pin.OUT`` - The output buffer is set to the given value immediately."
msgstr ""

#: ../../library/machine.Pin.rst:146
msgid ""
"``Pin.OPEN_DRAIN`` - If the value is '0' the pin is set to a low voltage "
"state.  Otherwise the pin is set to high-impedance state."
msgstr ""

#: ../../library/machine.Pin.rst:149
msgid "When setting the value this method returns ``None``."
msgstr ""

#: ../../library/machine.Pin.rst:153
msgid ""
"Pin objects are callable.  The call method provides a (fast) shortcut to "
"set and get the value of the pin.  It is equivalent to Pin.value([x]). "
"See :meth:`Pin.value` for more details."
msgstr ""

#: ../../library/machine.Pin.rst:159 ../../library/machine.Pin.rst:216
msgid "Set pin to \"1\" output level."
msgstr ""

#: ../../library/machine.Pin.rst:163 ../../library/machine.Pin.rst:210
msgid "Set pin to \"0\" output level."
msgstr ""

#: ../../library/machine.Pin.rst:167
msgid ""
"Configure an interrupt handler to be called when the trigger source of "
"the pin is active.  If the pin mode is ``Pin.IN`` then the trigger source"
" is the external value on the pin.  If the pin mode is ``Pin.OUT`` then "
"the trigger source is the output buffer of the pin.  Otherwise, if the "
"pin mode is ``Pin.OPEN_DRAIN`` then the trigger source is the output "
"buffer for state '0' and the external pin value for state '1'."
msgstr ""

#: ../../library/machine.Pin.rst:176
msgid ""
"``handler`` is an optional function to be called when the interrupt "
"triggers. The handler must take exactly one argument which is the ``Pin``"
" instance."
msgstr ""

#: ../../library/machine.Pin.rst:180
msgid ""
"``trigger`` configures the event which can generate an interrupt. "
"Possible values are:"
msgstr ""

#: ../../library/machine.Pin.rst:183
msgid "``Pin.IRQ_FALLING`` interrupt on falling edge."
msgstr ""

#: ../../library/machine.Pin.rst:184
msgid "``Pin.IRQ_RISING`` interrupt on rising edge."
msgstr ""

#: ../../library/machine.Pin.rst:185
msgid "``Pin.IRQ_LOW_LEVEL`` interrupt on low level."
msgstr ""

#: ../../library/machine.Pin.rst:186
msgid "``Pin.IRQ_HIGH_LEVEL`` interrupt on high level."
msgstr ""

#: ../../library/machine.Pin.rst:188
msgid "These values can be OR'ed together to trigger on multiple events."
msgstr ""

#: ../../library/machine.Pin.rst:190
msgid ""
"``priority`` sets the priority level of the interrupt.  The values it can"
" take are port-specific, but higher values always represent higher "
"priorities."
msgstr ""

#: ../../library/machine.Pin.rst:194
msgid ""
"``wake`` selects the power mode in which this interrupt can wake up the "
"system.  It can be ``machine.IDLE``, ``machine.SLEEP`` or "
"``machine.DEEPSLEEP``. These values can also be OR'ed together to make a "
"pin generate interrupts in more than one power mode."
msgstr ""

#: ../../library/machine.Pin.rst:199
msgid ""
"``hard`` if true a hardware interrupt is used. This reduces the delay "
"between the pin change and the handler being called. Hard interrupt "
"handlers may not allocate memory; see :ref:`isr_rules`. Not all ports "
"support this argument."
msgstr ""

#: ../../library/machine.Pin.rst:204
msgid "This method returns a callback object."
msgstr ""

#: ../../library/machine.Pin.rst:206
msgid ""
"The following methods are not part of the core Pin API and only "
"implemented on certain ports."
msgstr ""

#: ../../library/machine.Pin.rst:212 ../../library/machine.Pin.rst:218
msgid "Availability: nrf, rp2, stm32 ports."
msgstr ""

#: ../../library/machine.Pin.rst:222
msgid ""
"Get or set the pin mode. See the constructor documentation for details of"
" the ``mode`` argument."
msgstr ""

#: ../../library/machine.Pin.rst:225 ../../library/machine.Pin.rst:232
msgid "Availability: cc3200, stm32 ports."
msgstr ""

#: ../../library/machine.Pin.rst:229
msgid ""
"Get or set the pin pull state. See the constructor documentation for "
"details of the ``pull`` argument."
msgstr ""

#: ../../library/machine.Pin.rst:236
msgid ""
"Get or set the pin drive strength. See the constructor documentation for "
"details of the ``drive`` argument."
msgstr ""

#: ../../library/machine.Pin.rst:239
msgid "Availability: cc3200 port."
msgstr ""

#: ../../library/machine.Pin.rst:242
msgid "Constants"
msgstr ""

#: ../../library/machine.Pin.rst:244
msgid ""
"The following constants are used to configure the pin objects.  Note that"
" not all constants are available on all ports."
msgstr ""

#: ../../library/machine.Pin.rst:254
msgid "Selects the pin mode."
msgstr ""

#: ../../library/machine.Pin.rst:260
msgid ""
"Selects whether there is a pull up/down resistor.  Use the value ``None``"
" for no pull."
msgstr ""

#: ../../library/machine.Pin.rst:267
msgid "Selects the pin drive strength."
msgstr ""

#: ../../library/machine.Pin.rst:274
msgid "Selects the IRQ trigger type."
msgstr ""

