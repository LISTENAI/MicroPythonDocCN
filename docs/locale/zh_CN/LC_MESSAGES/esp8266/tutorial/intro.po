# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../esp8266/tutorial/intro.rst:4
msgid "Getting started with MicroPython on the ESP8266"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:6
msgid ""
"Using MicroPython is a great way to get the most of your ESP8266 board.  "
"And vice versa, the ESP8266 chip is a great platform for using "
"MicroPython.  This tutorial will guide you through setting up "
"MicroPython, getting a prompt, using WebREPL, connecting to the network "
"and communicating with the Internet, using the hardware peripherals, and "
"controlling some external components."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:12
msgid "Let's get started!"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:15
msgid "Requirements"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:17
msgid ""
"The first thing you need is a board with an ESP8266 chip.  The "
"MicroPython software supports the ESP8266 chip itself and any board "
"should work.  The main characteristic of a board is how much flash it "
"has, how the GPIO pins are connected to the outside world, and whether it"
" includes a built-in USB-serial convertor to make the UART available to "
"your PC."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:23
msgid ""
"The minimum requirement for flash size is 1Mbyte. There is also a special"
" build for boards with 512KB, but it is highly limited comparing to the "
"normal build: there is no support for filesystem, and thus features which"
" depend on it won't work (WebREPL, upip, etc.). As such, 512KB build will"
" be more interesting for users who build from source and fine-tune "
"parameters for their particular application."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:30
msgid ""
"Names of pins will be given in this tutorial using the chip names (eg "
"GPIO0) and it should be straightforward to find which pin this "
"corresponds to on your particular board."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:35
msgid "Powering the board"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:37
msgid ""
"If your board has a USB connector on it then most likely it is powered "
"through this when connected to your PC.  Otherwise you will need to power"
" it directly. Please refer to the documentation for your board for "
"further details."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:42
msgid "Getting the firmware"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:44
msgid ""
"The first thing you need to do is download the most recent MicroPython "
"firmware .bin file to load onto your ESP8266 device. You can download it "
"from the `MicroPython downloads page "
"<http://micropython.org/download#esp8266>`_. From here, you have 3 main "
"choices"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:49
msgid "Stable firmware builds for 1024kb modules and above."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:50
msgid "Daily firmware builds for 1024kb modules and above."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:51
msgid "Daily firmware builds for 512kb modules."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:53
msgid ""
"If you are just starting with MicroPython, the best bet is to go for the "
"Stable firmware builds. If you are an advanced, experienced MicroPython "
"ESP8266 user who would like to follow development closely and help with "
"testing new features, there are daily builds (note: you actually may need"
" some development experience, e.g. being ready to follow git history to "
"know what new changes and features were introduced)."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:60
msgid ""
"Support for 512kb modules is provided on a feature preview basis. For end"
" users, it's recommended to use modules with flash of 1024kb or more. As "
"such, only daily builds for 512kb modules are provided."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:65
msgid "Deploying the firmware"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:67
msgid ""
"Once you have the MicroPython firmware (compiled code), you need to load "
"it onto your ESP8266 device.  There are two main steps to do this: first "
"you need to put your device in boot-loader mode, and second you need to "
"copy across the firmware.  The exact procedure for these steps is highly "
"dependent on the particular board and you will need to refer to its "
"documentation for details."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:73
msgid ""
"If you have a board that has a USB connector, a USB-serial convertor, and"
" has the DTR and RTS pins wired in a special way then deploying the "
"firmware should be easy as all steps can be done automatically.  Boards "
"that have such features include the Adafruit Feather HUZZAH and NodeMCU "
"boards."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:78
msgid ""
"If you do not have such a board, you need keep GPIO0 pulled to ground and"
" reset the device by pulling the reset pin to ground and releasing it "
"again to enter programming mode."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:82
msgid ""
"For best results it is recommended to first erase the entire flash of "
"your device before putting on new MicroPython firmware."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:85
msgid ""
"Currently we only support esptool.py to copy across the firmware.  You "
"can find this tool here: `<https://github.com/espressif/esptool/>`__, or "
"install it using pip::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:91
msgid ""
"Versions starting with 1.3 support both Python 2.7 and Python 3.4 (or "
"newer). An older version (at least 1.2.1 is needed) works fine but will "
"require Python 2.7."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:95
msgid ""
"Any other flashing program should work, so feel free to try them out or "
"refer to the documentation for your board to see its recommendations."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:98
msgid "Using esptool.py you can erase the flash with the command::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:102
msgid "And then deploy the new firmware using::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:106
msgid ""
"You might need to change the \"port\" setting to something else relevant "
"for your PC.  You may also need to reduce the baudrate if you get errors "
"when flashing (eg down to 115200).  The filename of the firmware should "
"also match the file that you have."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:111
msgid ""
"For some boards with a particular FlashROM configuration (e.g. some "
"variants of a NodeMCU board) you may need to manually set a compatible "
"`SPI Flash Mode <https://github.com/espressif/esptool/wiki/SPI-Flash-"
"Modes>`_. You'd usually pick the fastest option that is compatible with "
"your device, but the ``-fm dout`` option (the slowest option) should have"
" the best compatibility::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:119
msgid ""
"If the above commands run without error then MicroPython should be "
"installed on your board!"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:122
msgid ""
"If you pulled GPIO0 manually to ground to enter programming mode, release"
" it now and reset the device by again pulling the reset pin to ground for"
" a short duration."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:127
msgid "Serial prompt"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:129
msgid ""
"Once you have the firmware on the device you can access the REPL (Python "
"prompt) over UART0 (GPIO1=TX, GPIO3=RX), which might be connected to a "
"USB-serial convertor, depending on your board.  The baudrate is 115200.  "
"The next part of the tutorial will discuss the prompt in more detail."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:135
msgid "WiFi"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:137
msgid ""
"After a fresh install and boot the device configures itself as a WiFi "
"access point (AP) that you can connect to.  The ESSID is of the form "
"MicroPython-xxxxxx where the x's are replaced with part of the MAC "
"address of your device (so will be the same everytime, and most likely "
"different for all ESP8266 chips).  The password for the WiFi is "
"micropythoN (note the upper-case N).  Its IP address will be 192.168.4.1 "
"once you connect to its network.  WiFi configuration will be discussed in"
" more detail later in the tutorial."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:146
msgid "Troubleshooting installation problems"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:148
msgid ""
"If you experience problems during flashing or with running firmware "
"immediately after it, here are troubleshooting recommendations:"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:151
msgid ""
"Be aware of and try to exclude hardware problems. There are 2 common "
"problems: bad power source quality and worn-out/defective FlashROM. "
"Speaking of power source, not just raw amperage is important, but also "
"low ripple and noise/EMI in general. If you experience issues with self-"
"made or wall-wart style power supply, try USB power from a computer. "
"Unearthed power supplies are also known to cause problems as they source "
"of increased EMI (electromagnetic interference) - at the very least, and "
"may lead to electrical devices breakdown. So, you are advised to avoid "
"using unearthed power connections when working with ESP8266 and other "
"boards. In regard to FlashROM hardware problems, there are independent "
"(not related to MicroPython in any way) reports `(e.g.) "
"<http://internetofhomethings.com/homethings/?p=538>`_ that on some "
"ESP8266 modules, FlashROM can be programmed as little as 20 times before "
"programming errors occur. This is *much* less than 100,000 programming "
"cycles cited for FlashROM chips of a type used with ESP8266 by reputable "
"vendors, which points to either production rejects, or second-hand worn-"
"out flash chips to be used on some (apparently cheap) modules/boards. You"
" may want to use your best judgement about source, price, documentation, "
"warranty, post-sales support for the modules/boards you purchase."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:170
msgid ""
"The flashing instructions above use flashing speed of 460800 baud, which "
"is good compromise between speed and stability. However, depending on "
"your module/board, USB-UART convertor, cables, host OS, etc., the above "
"baud rate may be too high and lead to errors. Try a more common 115200 "
"baud rate instead in such cases."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:176
msgid ""
"If lower baud rate didn't help, you may want to try older version of "
"esptool.py, which had a different programming algorithm::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:181
msgid ""
"This version doesn't support ``--flash_size=detect`` option, so you will "
"need to specify FlashROM size explicitly (in megabits). It also requires "
"Python 2.7, so you may need to use ``pip2`` instead of ``pip`` in the "
"command above."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:186
msgid ""
"The ``--flash_size`` option in the commands above is mandatory. Omitting "
"it will lead to a corrupted firmware."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:189
msgid ""
"To catch incorrect flash content (e.g. from a defective sector on a "
"chip), add ``--verify`` switch to the commands above."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:192
msgid ""
"Additionally, you can check the firmware integrity from a MicroPython "
"REPL prompt (assuming you were able to flash it and ``--verify`` option "
"doesn't report errors)::"
msgstr ""

#: ../../esp8266/tutorial/intro.rst:199
msgid ""
"If the last output value is True, the firmware is OK. Otherwise, it's "
"corrupted and need to be reflashed correctly."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:202
msgid ""
"If you experience any issues with another flashing application (not "
"esptool.py), try esptool.py, it is a generally accepted flashing "
"application in the ESP8266 community."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:206
msgid ""
"If you still experience problems with even flashing the firmware, please "
"refer to esptool.py project page, https://github.com/espressif/esptool "
"for additional documentation and bug tracker where you can report "
"problems."
msgstr ""

#: ../../esp8266/tutorial/intro.rst:210
msgid ""
"If you are able to flash firmware, but ``--verify`` option or "
"``esp.check_fw()`` return errors even after multiple retries, you may "
"have a defective FlashROM chip, as explained above."
msgstr ""

