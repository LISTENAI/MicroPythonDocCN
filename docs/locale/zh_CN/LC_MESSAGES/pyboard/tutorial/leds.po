# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pyboard/tutorial/leds.rst:2
msgid "Turning on LEDs and basic Python concepts"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:4
msgid ""
"The easiest thing to do on the pyboard is to turn on the LEDs attached to"
" the board. Connect the board, and log in as described in tutorial 1. We "
"will start by turning and LED on in the interpreter, type the following "
"::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:10
msgid "These commands turn the LED on and off."
msgstr ""

#: ../../pyboard/tutorial/leds.rst:12
msgid ""
"This is all very well but we would like this process to be automated. "
"Open the file MAIN.PY on the pyboard in your favourite text editor. Write"
" or paste the following lines into the file. If you are new to python, "
"then make sure you get the indentation correct since this matters! ::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:19
msgid ""
"When you save, the red light on the pyboard should turn on for about a "
"second. To run the script, do a soft reset (CTRL-D). The pyboard will "
"then restart and you should see a green light continuously flashing on "
"and off. Success, the first step on your path to building an army of evil"
" robots! When you are bored of the annoying flashing light then press "
"CTRL-C at your terminal to stop it running."
msgstr ""

#: ../../pyboard/tutorial/leds.rst:21
msgid ""
"So what does this code do? First we need some terminology. Python is an "
"object-oriented language, almost everything in python is a *class* and "
"when you create an instance of a class you get an *object*. Classes have "
"*methods* associated to them. A method (also called a member function) is"
" used to interact with or control the object."
msgstr ""

#: ../../pyboard/tutorial/leds.rst:23
msgid ""
"The first line of code creates an LED object which we have then called "
"led. When we create the object, it takes a single parameter which must be"
" between 1 and 4, corresponding to the 4 LEDs on the board. The pyb.LED "
"class has three important member functions that we will use: on(), off() "
"and toggle(). The other function that we use is pyb.delay() this simply "
"waits for a given time in milliseconds. Once we have created the LED "
"object, the statement while True: creates an infinite loop which toggles "
"the led between on and off and waits for 1 second."
msgstr ""

#: ../../pyboard/tutorial/leds.rst:25
msgid ""
"**Exercise: Try changing the time between toggling the led and turning on"
" a different LED.**"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:27
msgid ""
"**Exercise: Connect to the pyboard directly, create a pyb.LED object and "
"turn it on using the on() method.**"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:30
msgid "A Disco on your pyboard"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:32
msgid ""
"So far we have only used a single LED but the pyboard has 4 available. "
"Let's start by creating an object for each LED so we can control each of "
"them. We do that by creating a list of LEDS with a list comprehension. ::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:36
msgid ""
"If you call pyb.LED() with a number that isn't 1,2,3,4 you will get an "
"error message. Next we will set up an infinite loop that cycles through "
"each of the LEDs turning them on and off. ::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:45
#, python-format
msgid ""
"Here, n keeps track of the current LED and every time the loop is "
"executed we cycle to the next n (the % sign is a modulus operator that "
"keeps n between 0 and 3.) Then we access the nth LED and toggle it. If "
"you run this you should see each of the LEDs turning on then all turning "
"off again in sequence."
msgstr ""

#: ../../pyboard/tutorial/leds.rst:47
msgid ""
"One problem you might find is that if you stop the script and then start "
"it again that the LEDs are stuck on from the previous run, ruining our "
"carefully choreographed disco. We can fix this by turning all the LEDs "
"off when we initialise the script and then using a try/finally block. "
"When you press CTRL-C, MicroPython generates a VCPInterrupt exception. "
"Exceptions normally mean something has gone wrong and you can use a try: "
"command to \"catch\" an exception. In this case it is just the user "
"interrupting the script, so we don't need to catch the error but just "
"tell MicroPython what to do when we exit. The finally block does this, "
"and we use it to make sure all the LEDs are off. The full code is::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:64
msgid "The Special LEDs"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:66
msgid ""
"The yellow and blue LEDs are special. As well as turning them on and off,"
" you can control their intensity using the intensity() method. This takes"
" a number between 0 and 255 that determines how bright it is. The "
"following script makes the blue LED gradually brighter then turns it off "
"again. ::"
msgstr ""

#: ../../pyboard/tutorial/leds.rst:75
msgid ""
"You can call intensity() on LEDs 1 and 2 but they can only be off or on. "
"0 sets them off and any other number up to 255 turns them on."
msgstr ""

