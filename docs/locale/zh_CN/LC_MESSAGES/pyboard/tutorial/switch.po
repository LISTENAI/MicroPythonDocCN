# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pyboard/tutorial/switch.rst:4
msgid "Switches, callbacks and interrupts"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:6
msgid ""
"The pyboard has 2 small switches, labelled USR and RST.  The RST switch "
"is a hard-reset switch, and if you press it then it restarts the pyboard "
"from scratch, equivalent to turning the power off then back on."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:10
msgid ""
"The USR switch is for general use, and is controlled via a Switch object."
" To make a switch object do::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:15
msgid ""
"Remember that you may need to type ``import pyb`` if you get an error "
"that the name ``pyb`` does not exist."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:18
msgid "With the switch object you can get its status::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:23
msgid ""
"This will print ``False`` if the switch is not held, or ``True`` if it is"
" held. Try holding the USR switch down while running the above command."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:26
msgid ""
"There is also a shorthand notation to get the switch status, by "
"\"calling\" the switch object::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:33
msgid "Switch callbacks"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:35
msgid ""
"The switch is a very simple object, but it does have one advanced "
"feature: the ``sw.callback()`` function.  The callback function sets up "
"something to run when the switch is pressed, and uses an interrupt.  It's"
" probably best to start with an example before understanding how "
"interrupts work.  Try running the following at the prompt::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:43
msgid ""
"This tells the switch to print ``press!`` each time the switch is pressed"
" down.  Go ahead and try it: press the USR switch and watch the output on"
" your PC.  Note that this print will interrupt anything you are typing, "
"and is an example of an interrupt routine running asynchronously."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:48
msgid "As another example try::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:52
msgid ""
"This will toggle the red LED each time the switch is pressed.  And it "
"will even work while other code is running."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:55
msgid "To disable the switch callback, pass ``None`` to the callback function::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:59
msgid ""
"You can pass any function (that takes zero arguments) to the switch "
"callback. Above we used the ``lambda`` feature of Python to create an "
"anonymous function on the fly.  But we could equally do::"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:68
msgid ""
"This creates a function called ``f`` and assigns it to the switch "
"callback. You can do things this way when your function is more "
"complicated than a ``lambda`` will allow."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:72
msgid ""
"Note that your callback functions must not allocate any memory (for "
"example they cannot create a tuple or list).  Callback functions should "
"be relatively simple.  If you need to make a list, make it beforehand and"
" store it in a global variable (or make it local and close over it).  If "
"you need to do a long, complicated calculation, then use the callback to "
"set a flag which some other code then responds to."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:80
msgid "Technical details of interrupts"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:82
msgid ""
"Let's step through the details of what is happening with the switch "
"callback.  When you register a function with ``sw.callback()``, the "
"switch sets up an external interrupt trigger (falling edge) on the pin "
"that the switch is connected to.  This means that the microcontroller "
"will listen on the pin for any changes, and the following will occur:"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:88
msgid ""
"When the switch is pressed a change occurs on the pin (the pin goes from "
"low to high), and the microcontroller registers this change."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:90
msgid ""
"The microcontroller finishes executing the current machine instruction, "
"stops execution, and saves its current state (pushes the registers on the"
" stack).  This has the effect of pausing any code, for example your "
"running Python script."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:94
msgid ""
"The microcontroller starts executing the special interrupt handler "
"associated with the switch's external trigger.  This interrupt handler "
"gets the function that you registered with ``sw.callback()`` and executes"
" it."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:98
msgid ""
"Your callback function is executed until it finishes, returning control "
"to the switch interrupt handler."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:100
msgid ""
"The switch interrupt handler returns, and the microcontroller is notified"
" that the interrupt has been dealt with."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:102
msgid "The microcontroller restores the state that it saved in step 2."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:103
msgid ""
"Execution continues of the code that was running at the beginning.  Apart"
" from the pause, this code does not notice that it was interrupted."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:106
msgid ""
"The above sequence of events gets a bit more complicated when multiple "
"interrupts occur at the same time.  In that case, the interrupt with the "
"highest priority goes first, then the others in order of their priority. "
"The switch interrupt is set at the lowest priority."
msgstr ""

#: ../../pyboard/tutorial/switch.rst:112
msgid "Further reading"
msgstr ""

#: ../../pyboard/tutorial/switch.rst:114
msgid ""
"For further information about using hardware interrupts see :ref:`writing"
" interrupt handlers <isr_rules>`."
msgstr ""

