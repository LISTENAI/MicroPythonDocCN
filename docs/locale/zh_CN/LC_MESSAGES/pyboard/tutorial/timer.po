# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pyboard/tutorial/timer.rst:2
msgid "The Timers"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:4
msgid ""
"The pyboard has 14 timers which each consist of an independent counter "
"running at a user-defined frequency.  They can be set up to run a "
"function at specific intervals. The 14 timers are numbered 1 through 14, "
"but 3 is reserved for internal use, and 5 and 6 are used for servo and "
"ADC/DAC control. Avoid using these timers if possible."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:11
msgid "Let's create a timer object::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:15
msgid "Now let's see what we just created::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:20
msgid ""
"The pyboard is telling us that ``tim`` is attached to timer number 4, but"
" it's not yet initialised.  So let's initialise it to trigger at 10 Hz "
"(that's 10 times per second)::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:26
msgid "Now that it's initialised, we can see some information about the timer::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:31
msgid ""
"The information means that this timer is set to run at the peripheral "
"clock speed divided by 624+1, and it will count from 0 up to 13439, at "
"which point it triggers an interrupt, and then starts counting again from"
" 0.  These numbers are set to make the timer trigger at 10 Hz: the source"
" frequency of the timer is 84MHz (found by running ``tim.source_freq()``)"
" so we get 84MHz / 625 / 13440 = 10Hz."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:39
msgid "Timer counter"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:41
msgid ""
"So what can we do with our timer?  The most basic thing is to get the "
"current value of its counter::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:47
msgid "This counter will continuously change, and counts up."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:50
msgid "Timer callbacks"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:52
msgid ""
"The next thing we can do is register a callback function for the timer to"
" execute when it triggers (see the :ref:`switch tutorial "
"<pyboard_tutorial_switch>` for an introduction to callback functions)::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:58
msgid ""
"This should start the red LED flashing right away.  It will be flashing "
"at 5 Hz (2 toggle's are needed for 1 flash, so toggling at 10 Hz makes it"
" flash at 5 Hz).  You can change the frequency by re-initialising the "
"timer::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:65
msgid "You can disable the callback by passing it the value ``None``::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:69
msgid ""
"The function that you pass to callback must take 1 argument, which is the"
" timer object that triggered.  This allows you to control the timer from "
"within the callback function."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:73
msgid "We can create 2 timers and run them independently::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:80
msgid ""
"Because the callbacks are proper hardware interrupts, we can continue to "
"use the pyboard for other things while these timers are running."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:84
msgid "Making a microsecond counter"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:86
msgid ""
"You can use a timer to create a microsecond counter, which might be "
"useful when you are doing something which requires accurate timing. We "
"will use timer 2 for this, since timer 2 has a 32-bit counter (so does "
"timer 5, but if you use timer 5 then you can't use the Servo driver at "
"the same time)."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:92
msgid "We set up timer 2 as follows::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:96
msgid ""
"The prescaler is set at 83, which makes this timer count at 1 MHz. This "
"is because the CPU clock, running at 168 MHz, is divided by 2 and then by"
" prescaler+1, giving a frequency of 168 MHz/2/(83+1)=1 MHz for timer 2.  "
"The period is set to a large number so that the timer can count up to a "
"large number before wrapping back around to zero. In this case it will "
"take about 17 minutes before it cycles back to zero."
msgstr ""

#: ../../pyboard/tutorial/timer.rst:104
msgid "To use this timer, it's best to first reset it to 0::"
msgstr ""

#: ../../pyboard/tutorial/timer.rst:108
msgid "and then perform your timing::"
msgstr ""

