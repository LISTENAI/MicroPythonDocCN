# SOME DESCRIPTIVE TITLE.
# Copyright (C) - The MicroPython Documentation is Copyright Â© 2014-2022,
# Damien P. George, Paul Sokolovsky, and contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 14:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pyboard/general.rst:4
msgid "General information about the pyboard"
msgstr ""

#: ../../pyboard/general.rst:6
msgid "Contents"
msgstr ""

#: ../../pyboard/general.rst:9
msgid "Local filesystem and SD card"
msgstr ""

#: ../../pyboard/general.rst:11
msgid ""
"There is a small internal filesystem (a drive) on the pyboard, called "
"``/flash``, which is stored within the microcontroller's flash memory.  "
"If a micro SD card is inserted into the slot, it is available as ``/sd``."
msgstr ""

#: ../../pyboard/general.rst:15
msgid ""
"When the pyboard boots up, it needs to choose a filesystem to boot from."
"  If there is no SD card, then it uses the internal filesystem ``/flash``"
" as the boot filesystem, otherwise, it uses the SD card ``/sd``. After "
"the boot, the current directory is set to one of the directories above."
msgstr ""

#: ../../pyboard/general.rst:20
msgid ""
"If needed, you can prevent the use of the SD card by creating an empty "
"file called ``/flash/SKIPSD``.  If this file exists when the pyboard "
"boots up then the SD card will be skipped and the pyboard will always "
"boot from the internal filesystem (in this case the SD card won't be "
"mounted but you can still mount and use it later in your program using "
"``os.mount``)."
msgstr ""

#: ../../pyboard/general.rst:26
msgid ""
"(Note that on older versions of the board, ``/flash`` is called ``0:/`` "
"and ``/sd`` is called ``1:/``)."
msgstr ""

#: ../../pyboard/general.rst:29
msgid ""
"The boot filesystem is used for 2 things: it is the filesystem from which"
" the ``boot.py`` and ``main.py`` files are searched for, and it is the "
"filesystem which is made available on your PC over the USB cable."
msgstr ""

#: ../../pyboard/general.rst:33
msgid ""
"The filesystem will be available as a USB flash drive on your PC.  You "
"can save files to the drive, and edit ``boot.py`` and ``main.py``."
msgstr ""

#: ../../pyboard/general.rst:36
msgid ""
"*Remember to eject (on Linux, unmount) the USB drive before you reset "
"your pyboard.*"
msgstr ""

#: ../../pyboard/general.rst:40
msgid "Boot modes"
msgstr ""

#: ../../pyboard/general.rst:42
msgid ""
"If you power up normally, or press the reset button, the pyboard will "
"boot into standard mode: the ``boot.py`` file will be executed first, "
"then the USB will be configured, then ``main.py`` will run."
msgstr ""

#: ../../pyboard/general.rst:46
msgid ""
"You can override this boot sequence by holding down the user switch as "
"the board is booting up.  Hold down user switch and press reset, and then"
" as you continue to hold the user switch, the LEDs will count in binary. "
"When the LEDs have reached the mode you want, let go of the user switch, "
"the LEDs for the selected mode will flash quickly, and the board will "
"boot."
msgstr ""

#: ../../pyboard/general.rst:52
msgid "The modes are:"
msgstr ""

#: ../../pyboard/general.rst:54
msgid "Green LED only, *standard boot*: run ``boot.py`` then ``main.py``."
msgstr ""

#: ../../pyboard/general.rst:55
msgid "Orange LED only, *safe boot*: don't run any scripts on boot-up."
msgstr ""

#: ../../pyboard/general.rst:56
msgid ""
"Green and orange LED together, *filesystem reset*: resets the flash "
"filesystem to its factory state, then boots in safe mode."
msgstr ""

#: ../../pyboard/general.rst:59
msgid ""
"If your filesystem becomes corrupt, boot into mode 3 to fix it. If "
"resetting the filesystem while plugged into your compute doesn't work, "
"you can try doing the same procedure while the board is plugged into a "
"USB charger, or other USB power supply without data connection."
msgstr ""

#: ../../pyboard/general.rst:65
msgid "Errors: flashing LEDs"
msgstr ""

#: ../../pyboard/general.rst:67
msgid "There are currently 2 kinds of errors that you might see:"
msgstr ""

#: ../../pyboard/general.rst:69
msgid "If the red and green LEDs flash alternatively, then a Python script"
msgstr ""

#: ../../pyboard/general.rst:70
msgid "(eg ``main.py``) has an error.  Use the REPL to debug it."
msgstr ""

#: ../../pyboard/general.rst:71
msgid ""
"If all 4 LEDs cycle on and off slowly, then there was a hard fault. This "
"cannot be recovered from and you need to do a hard reset."
msgstr ""

#: ../../pyboard/general.rst:75
msgid "Guide for using the pyboard with Windows"
msgstr ""

#: ../../pyboard/general.rst:77
msgid ""
"The following PDF guide gives information about using the pyboard with "
"Windows, including setting up the serial prompt and downloading new "
"firmware using DFU programming: `PDF guide "
"<http://micropython.org/resources/Micro-Python-Windows-setup.pdf>`__."
msgstr ""

#: ../../pyboard/hardware/index.rst:2
msgid "The pyboard hardware"
msgstr ""

#: ../../pyboard/hardware/index.rst:4
msgid "For the pyboard:"
msgstr ""

#: ../../pyboard/hardware/index.rst:6
msgid "v1.1"
msgstr ""

#: ../../pyboard/hardware/index.rst:7
msgid ""
"`PYBv1.1 schematics and layout "
"<https://micropython.org/resources/PYBv11.pdf>`_ (2.9MiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:11
msgid "v1.0"
msgstr ""

#: ../../pyboard/hardware/index.rst:9
msgid ""
"`PYBv1.0 schematics and layout "
"<http://micropython.org/resources/PYBv10b.pdf>`_ (2.4MiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:10
msgid ""
"`PYBv1.0 metric dimensions <http://micropython.org/resources/PYBv10b-"
"metric-dimensions.pdf>`_ (360KiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:11
msgid ""
"`PYBv1.0 imperial dimensions <http://micropython.org/resources/PYBv10b-"
"imperial-dimensions.pdf>`_ (360KiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:13
msgid "For the official skin modules:"
msgstr ""

#: ../../pyboard/hardware/index.rst:15
msgid ""
"`LCD32MKv1.0 schematics "
"<http://micropython.org/resources/LCD32MKv10-schematics.pdf>`_ (194KiB "
"PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:16
msgid ""
"`AMPv1.0 schematics "
"<http://micropython.org/resources/AMPv10-schematics.pdf>`_ (209KiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:17
msgid "LCD160CRv1.0: see :mod:`lcd160cr`"
msgstr ""

#: ../../pyboard/hardware/index.rst:20
msgid "Datasheets for the components on the pyboard"
msgstr ""

#: ../../pyboard/hardware/index.rst:22
msgid ""
"The microcontroller: `STM32F405RGT6 "
"<http://www.st.com/web/catalog/mmc/FM141/SC1169/SS1577/LN1035/PF252144>`_"
" (link to manufacturer's site)"
msgstr ""

#: ../../pyboard/hardware/index.rst:23
msgid ""
"The accelerometer: `Freescale MMA7660 "
"<http://micropython.org/resources/datasheets/MMA7660FC.pdf>`_ (800kiB "
"PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:24
msgid ""
"The LDO voltage regulator: `Microchip MCP1802 "
"<http://micropython.org/resources/datasheets/MCP1802-22053C.pdf>`_ "
"(400kiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:27
msgid "Datasheets for other components"
msgstr ""

#: ../../pyboard/hardware/index.rst:29
msgid ""
"The LCD display on the LCD touch-sensor skin: `Newhaven Display NHD-"
"C12832A1Z-FSW-FBW-3V3 <http://micropython.org/resources/datasheets/NHD-"
"C12832A1Z-FSW-FBW-3V3.pdf>`_ (460KiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:30
msgid ""
"The touch sensor chip on the LCD touch-sensor skin: `Freescale MPR121 "
"<http://micropython.org/resources/datasheets/MPR121.pdf>`_ (280KiB PDF)"
msgstr ""

#: ../../pyboard/hardware/index.rst:31
msgid ""
"The digital potentiometer on the audio skin: `Microchip MCP4541 "
"<http://micropython.org/resources/datasheets/MCP4541-22107B.pdf>`_ "
"(2.7MiB PDF)"
msgstr ""

